---
author: "E. David Aja"
footer:  "[Personal R Administration](https://github.com/rstats-wtf/wtf-personal-radmin-slides)"
logo: "img/wtf-logo-square-transparent.png"
format: 
  revealjs: 
    theme: [night, slides.scss]
    highlight-style: a11y
    transition: fade
    slide-number: true
    chalkboard: true
    navigation-mode: linear
    controls: false
    mermaid-format: svg
execute:
  freeze: auto
from: markdown+emoji
title: personal radmin
subtitle: throw your computer into the ocean with confidence
---

## Course material

::: r-fit-text
[posit-conf-2024/wtf](https://github.com/posit-conf-2024/wtf)
:::

## a brief personal history:

::: {.columns .scrollable}
::: {.column .fragment width="33%"}
### Auditor

::: r-fit-text
-   personal laptop {{< fa brands windows >}}
-   RStudio in Citrix {{< fa brands windows >}}
-   airgapped Posit Workbench {{< fa brands linux >}}
-   airgapped Shiny Server Pro {{< fa brands linux >}}
-   Special Issue Individual Laptop {{< fa brands windows >}} {{< fa brands linux >}}
-   Special Issue Individual Desktop {{< fa brands windows >}}
-   Special Issue Team Desktop {{< fa brands windows >}}
:::
:::

::: {.column .fragment width="33%"}
### Data Scientist

::: r-fit-text
-   personal laptop {{< fa brands windows >}}
-   work laptop {{< fa brands windows >}}
-   RStudio in Citrix {{< fa brands windows >}}
-   RStudio Server {{< fa brands linux >}}
:::
:::

::: {.column .fragment width="33%"}
### Solutions Engineer

::: r-fit-text
-   personal laptop {{< fa brands windows >}}
-   work laptop {{< fa brands apple >}}
-   Posit Workbench Demo Server {{< fa brands linux >}}
-   Posit Workbench Internal Server {{< fa brands linux >}}
-   misc ephemeral environments
:::
:::
:::

::: notes
this is intended to provide context on my priorities / habits of thought: 
- it needs to work across operating systems 
- You can't depend on having pro features 
- avoid admin where possible
- as portable as practical
- audit context means I need to be able to reproduce exactly
- "run this command" preferable to a confluence page of screenshots
:::

## How do I...

::: incremental
-   upgrade the version of R I'm using for this project?
-   track which package versions I'm using for this project?
-   move this project from one machine to another?
:::

::: notes
We're extending the lessons from Day 1 to think about what it means to work with R projects over time.\
That means that in addition to wanting our individual projects to flow smoothly, we also want to strategize about how to manage different versions of the language, different package versions, and different execution contexts. Working on an old project on a new computer is a lot like trying to put an app into production.
:::

# warmup

## :package: library

::: {.fragment fragment-index="1"}
**R packages**

-   the natural unit for distributing R code
:::

::: {.fragment fragment-index="2"}
**base R**

-   14 base + 15 recommended packages
-   ships with all binary distributions of R
:::

::: {.fragment fragment-index="3"}
**For example, have you used lattice recently?** 🤷

-   it came with your R installation, can use out of the box
-   `library(lattice)`
:::

## Where do packages live locally?

<br>

By default, in the default library

`.Library`

<br>

All libraries for the current session

`.libPaths()`

<br>

All installed packages

`installed.packages()`


## explore your package library

```{.r}
usethis::use_course("rstats-wtf/wtf-explore-libraries")
# use_course("rstats-wtf/wtf-explore-libraries", destdir = "my/new/location")
usethis::proj_activate("/path/to/my/new/location")
```

{{< countdown "7:30" >}}

# starting R

## why?

Sometimes we want to change the way our code behaves *without* having to change the code.

::: notes
behaves might mean
- "what computer do I think I'm on" 
- "is this dev or prod"?
:::

## R startup sequence {.smaller background-color="#cccccc"}

::: r-stack
![](img/R-startup.svg)
:::

## R startup sequence (our focus) {.smaller background-color="#cccccc"}

::: r-stack
![](img/r-startup-focus.svg)
:::

## :warning: Use a newline

::: columns
::: column
startup files **must** end in a newline. <br/> <br/>

R may silently throw away the last line if you don't do this.
:::

::: column
![](img/insert-newline-end-highlight.png)
:::
:::

## `.Renviron`

environment variables

> a \[...\] named value that can affect the way running processes will behave on a computer

## what goes in `.Renviron`

:white_check_mark: R-specific environment variables\
:white_check_mark: API keys or other secrets\
:x: R code

## Editing `.Renviron`

::: {.r .r-fit-text}
`usethis::edit_r_environ(scope = ?)`
:::

::: columns
::: {.column width="40%"}
### user

`~/.Renviron`
:::

::: {.column width="60%"}
### project

`path/to/your/project/.Renviron`
:::
:::

## example `.Renviron`

``` bash
PATH="${RTOOLS40_HOME}\usr\bin;${PATH}" # windows users
CONNECT_API_KEY=DaYK2hBUriSBYUEGIAiyXsRJHSjTYJN3
R_HISTSIZE=100000
RETICULATE_PYTHON=.venv/bin/python
DB_USER=elephant
DB_PASS=p0stgr3s
```

## read environment variables

::: {.r .r-fit-text}
`Sys.getenv()`
:::


## edit your user `.Renviron` {.smaller}

1.  `usethis::edit_r_environ()`
2.  add `WTF_USER=<your name>_user`
3.  restart your R session\
    `CTRL + SHIFT + F10`\
    `CMD  + SHIFT + 0`
4.  Retrieve the value of WTF_USER `Sys.getenv("WTF_USER")`
  
{{< countdown "2:00" >}}

## edit your project `.Renviron` {.smaller}

1.  `usethis::edit_r_environ("project")`
2.  add `WTF_PROJECT=<your name>_project`
3.  restart your R session\
    `CTRL + SHIFT + F10`\
    `CMD  + SHIFT + 0`
4.  Retrieve the value of WTF_PROJECT `Sys.getenv("WTF_PROJECT")`

{{< countdown "2:00" >}}

::: question
what's the value of `WTF_USER` after you set `WTF_PROJECT`?
:::

## `.Renviron` recap

project `.Renviron` "short-circuits"
if it exists, your user `.Renviron` will not be evaluated

## `.Rprofile`

R code that runs at the start of each session

## ?interactive()

::: columns
::: column
### `TRUE`

:technologist: <br/>

-   sending individual lines of code to the console

<br/> <br/>

::: fragment
:point_up: most `.Rprofile` customization
:::
:::

::: column
### `FALSE`

:robot: <br/>

-   knitting an RMarkdown document
-   `R -e script.R`
:::
:::

## what to put in `.Rprofile`

-   set a default CRAN mirror
-   customize [R prompt](https://github.com/gaborcsardi/prompt/)

## what *not* to put in `.Rprofile`

If it matters for code you share, it **should not** be in `.Rprofile`

## why shouldn't these go in `.Rprofile`?

::: incremental
-   `options(stringsAsFactors = FALSE)`
-   `library(tidyverse)`
-   `f <- dplyr::filter`
-   `theme_set(theme_bw())`
:::

## discuss with your neighbor

::: question
Why *might* these be safe to put in `.Rprofile`?
:::

<br>

``` r
library(usethis)
library(devtools)
```

{{< countdown "2:00" >}}

## dotfiles

::: r-fit-text
https://github.com/search?q=.Rprofile
:::

## activity

::: panel-tabset
### edit your user `.Rprofile` {.smaller}

1.  `usethis::edit_r_profile()`
2.  add `print("from my user Rprofile")`
3.  restart your R session\
    `CTRL + SHIFT + F10`\
    `CMD  + SHIFT + 0`
4.  what value is printed when you restart?

### edit your project `.Rprofile` {.smaller}

1.  `usethis::edit_r_profile("project")`
2.  add `print("from my project Rprofile")`
3.  restart your R session\
    `CTRL + SHIFT + F10`\
    `CMD  + SHIFT + 0`
4.  what value is printed when you restart?
:::

{{< countdown "5:00" >}}

## `.Rprofile` recap

project `.Rprofile` "short-circuits"\
if it exists, your user `.Rprofile` will not be evaluated

## wrapping up

::: columns
::: column
### `.Renviron`

-   secrets
-   environment information
:::

::: column
### `.Rprofile`

-   development dependencies
:::
:::

::: notes
Environment variables are inherited by child processes, so setting them early in the startup process is valuable Hosting providers trying to deal with secrets will often let you supply environment variables
:::

# installing R packages

## why

::: r-stack
![](img/slacking-tidyverse.png)
:::

::: notes
having a reason to slack off is fun but being able to get your work done quickly is more fun
:::

## states of R packages

```{mermaid}
%%{init: {"theme": "dark" } }%%
graph TD
Source -- "devtools::build()" --> Bundled
Bundled -- "devtools::build(binary = TRUE)"--> Binary 
Binary --"install.packages()"--> Installed 
Installed --"library()"--> Loaded 
```

::: aside
[R Packages -- Structure](https://r-pkgs.org/Structure.html)
:::

## states of R packages

```{mermaid}
%%{init: {"theme": "dark" } }%%
flowchart TD
subgraph dev
  direction LR
Source -- "devtools::build()" --> Bundled
Bundled -- "devtools::build(binary = TRUE)"--> Binary 
end
subgraph use
direction LR
Binary --"install.packages()"--> Installed 
Installed --"library()"--> Loaded 
end
```

::: aside
[R Packages -- Structure](https://r-pkgs.org/Structure.html)
:::

::: notes
-   show how to set options for different environment managers
-   Install package from github
-   Develop your own packages
:::

## Binary

-   compiled ahead of time
-   easiest / fastest to install

::: notes
you may particularly care about installation speed if you're being billed by the minute for compute time, or if you need computations to finish before a timeout
:::

## where to get binaries

|                                   |        CRAN        | Posit Public Package Manager (p3m) |
|-----------------------------------|:------------------:|:----------------------------------:|
| {{< fa brands windows >}} windows | :white_check_mark: |         :white_check_mark:         |
| {{< fa brands apple >}} mac OS    | :white_check_mark: |         :white_check_mark:         |
| {{< fa brands linux >}} linux     |        :x:         |         :white_check_mark:         |

## are binaries available?

## CRAN

![](img/connectapi-cran-binary-highlight.png)

## may not be the latest

![](img/parallelly-versions-highlight.png)

## may not be the latest

![](img/compile-from-sources-question.png)

## may not be the latest

``` {.r code-line-numbers="6-8"}
> install.packages("parallelly", repos = "https://cran.r-project.org")

Installing package into ‘C:/Users/WDAGUtilityAccount/Documents/R/win-library/4.0’
(as ‘lib’ is unspecified)

  There is a binary version available but the source version is later:
           binary source needs_compilation
parallelly 1.31.0 1.32.1             FALSE

installing the source package ‘parallelly’

trying URL 'https://cran.r-project.org/src/contrib/parallelly_1.32.1.tar.gz'
Content type 'application/x-gzip' length 124853 bytes (121 KB)
downloaded 121 KB

* installing *source* package 'parallelly' ...
** package 'parallelly' successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
  converting help for package 'parallelly'
    finding HTML links ... done
    as.cluster                              html  
    autoStopCluster                         html  
    availableConnections                    html  
    availableCores                          html  
    availableWorkers                        html  
    canPortBeUsed                           html  
    cpuLoad                                 html  
    find_rshcmd                             html  
    freeCores                               html  
    freePort                                html  
    getOption2                              html  
    isConnectionValid                       html  
    isForkedChild                           html  
    isForkedNode                            html  
    isLocalhostNode                         html  
    isNodeAlive                             html  
    makeClusterMPI                          html  
    makeClusterPSOCK                        html  
    parallelly.options                      html  
    pid_exists                              html  
    supportsMulticore                       html  
*** copying figures
** building package indices
** testing if installed package can be loaded from temporary location
*** arch - i386
*** arch - x64
** testing if installed package can be loaded from final location
*** arch - i386
*** arch - x64
** testing if installed package keeps a record of temporary installation path
* DONE (parallelly)
```

## [Posit Public Package Manager](https://p3m.dev)

![](img/ppm-binaries.png)

## PPM

![](img/rspm-binaries-zoom-highlight.png)

## how do I know I got a binary?

::: panel-tabset

### CRAN {{< fa brands windows >}}

``` {.r code-line-numbers="5,10"}
> install.packages("parallelly", repos = "https://cran.r-project.org")
Installing package into ‘C:/Users/edavi/Documents/R/win-library/4.1’
(as ‘lib’ is unspecified)
trying URL 'https://cran.r-project.org/bin/windows/contrib/4.1/parallelly_1.32.1.zip'
Content type 'application/zip' length 306137 bytes (298 KB)
downloaded 298 KB

package ‘parallelly’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
    C:\Users\edavi\AppData\Local\Temp\Rtmpa2s3e8\downloaded_packages
```

### CRAN {{< fa brands apple >}}

``` {.r code-line-numbers="4,10"}
> install.packages("renv", repos="https://cran.r-project.org")
Installing package into ‘/Users/edavidaja/Library/R/x86_64/4.1/library’
(as ‘lib’ is unspecified)
trying URL 'https://cran.r-project.org/bin/macosx/contrib/4.1/renv_0.15.5.tgz'
Content type 'application/x-gzip' length 1866760 bytes (1.8 MB)
==================================================
downloaded 1.8 MB


The downloaded binary packages are in
 /var/folders/b5/fl4ff68d23s148tg1_1gnflc0000gn/T//RtmpMk69B0/downloaded_packages
```

### p3m

``` {.r code-line-numbers="10"}
> install.packages("remotes")
Installing package into ‘C:/Users/WDAGUtilityAccount/AppData/Local/R/win-library/4.2’
(as ‘lib’ is unspecified)
trying URL 'https://p3m.dev/cran/latest/bin/windows/contrib/4.2/remotes_2.4.2.zip'
Content type 'binary/octet-stream' length 399930 bytes (390 KB)
downloaded 390 KB

package ‘remotes’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
  C:\Users\WDAGUtilityAccount\AppData\Local\Temp\RtmpA1edRi\downloaded_packages
```

### renv

``` {.r code-line-numbers="5"}
> renv::install("fs")
Retrieving 'https://p3m.dev/cran/latest/bin/windows/contrib/4.2/fs_1.5.2.zip' ...
  OK [downloaded 380.9 Kb in 0.5 secs]
Installing fs [1.5.2] ...
  OK [installed binary]
Moving fs [1.5.2] into the cache ...
  OK [moved to cache in 7.4 milliseconds]
```
:::

## pop quiz, hotshot

::: question
Does [Posit Public Package Manager](https://p3m.dev) serve a binary of `dplyr` for R 3.6?
:::

{{< countdown "2:00" >}}

## Source

-   compiled in *your* environment
-   requires extra tools when package uses C, C++, Fortran, Rust, etc.

::: notes
-   most common reason to install from source is when you want the development version of a package from github One additional complication for \*nix users:
-   generally on windows can install and load packages that depend on other lower level libraries quite easily. Explain installing `sf`, for example.
:::

## if you don't have tools

::: panel-tabset
### `make`

``` {.r code-line-numbers="11"}
Running `R CMD build`...
* checking for file 'C:\Users\WDAGUtilityAccount\AppData\Local\Temp\RtmpkTUH61\remotes192027624804\tidyverse-dplyr-36ef054/DESCRIPTION' ... OK
* preparing 'dplyr':
* checking DESCRIPTION meta-information ... OK
* cleaning src
* installing the package to process help pages
      -----------------------------------
* installing *source* package 'dplyr' ...
** using staged installation
** libs
Warning in system(cmd) : 'make' not found
ERROR: compilation failed for package 'dplyr'
* removing 'C:/Users/WDAGUT~1/AppData/Local/Temp/Rtmp6hYuyV/Rinst1334d1a23d1/dplyr'
      -----------------------------------
ERROR: package installation failed
```

### `g++`

``` {.r code-line-numbers="7"}
Warning in untar2(tarfile, files, list, exdir, restore_times) :
  skipping pax global extended headers
* installing *source* package 'dplyr' ...
** using staged installation
** libs
c:/Rtools/mingw_64/bin/g++ -std=gnu++11  -I"C:/PROGRA~1/R/R-36~1.3/include" -DNDEBUG          -O2 -Wall  -mtune=core2 -c filter.cpp -o filter.o
sh: line 1: c:/Rtools/mingw_64/bin/g++: No such file or directory
make: *** [C:/PROGRA~1/R/R-36~1.3/etc/x64/Makeconf:215: filter.o] Error 127
ERROR: compilation failed for package 'dplyr'
* removing 'C:/Users/edavi/DOCUME~1/projects/WTF-PR~1/renv/staging/1/dplyr'
Error: install of package 'dplyr' failed
```
:::

## how to get the tools

::: panel-tabset
### windows {{< fa brands windows >}}

[Rtools](https://cran.r-project.org/bin/windows/Rtools/)

### macOS {{< fa brands apple >}}

[XCode](https://apps.apple.com/us/app/xcode/id497799835?mt=12)

:warning: don't run right now

``` {.bash code-line-numbers="false"}
xcode-select --install
```

### linux {{< fa brands linux >}}

install tools via package manager, e.g.

``` bash
apt install make
```
:::

## got tools?

::: {.r .r-fit-text}
`devtools::has_devel()`
:::

> `## Your system is ready to build packages!`

## system dependencies

::: panel-tabset

### xml2

```{.r code-line-numbers="15-18"}
* installing *source* package ‘xml2’ ...
** package ‘xml2’ successfully unpacked and MD5 sums checked
** using staged installation
Package libxml-2.0 was not found in the pkg-config search path.
Perhaps you should add the directory containing `libxml-2.0.pc'
to the PKG_CONFIG_PATH environment variable
Package 'libxml-2.0', required by 'virtual:world', not found
Package libxml-2.0 was not found in the pkg-config search path.
Perhaps you should add the directory containing `libxml-2.0.pc'
to the PKG_CONFIG_PATH environment variable
Package 'libxml-2.0', required by 'virtual:world', not found
Using PKG_CFLAGS=
Using PKG_LIBS=-lxml2
------------------------- ANTICONF ERROR ---------------------------
Configuration failed because libxml-2.0 was not found. Try installing:
 * deb: libxml2-dev (Debian, Ubuntu, etc)
 * rpm: libxml2-devel (Fedora, CentOS, RHEL)
 * csw: libxml2_dev (Solaris)
If libxml-2.0 is already installed, check that 'pkg-config' is in your
PATH and PKG_CONFIG_PATH contains a libxml-2.0.pc file. If pkg-config
is unavailable you can set INCLUDE_DIR and LIB_DIR manually via:
R CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'
--------------------------------------------------------------------
ERROR: configuration failed for package ‘xml2’
* removing ‘/usr/local/lib/R/site-library/xml2’

The downloaded source packages are in
	‘/tmp/Rtmp9JMc7F/downloaded_packages’
Warning message:
In install.packages("xml2") :
  installation of package ‘xml2’ had non-zero exit status
```

### `openssl`

```{.r code-line-numbers="6-10"}
* installing *source* package ‘s2’ ...
** package ‘s2’ successfully unpacked and MD5 sums checked
** using staged installation
Testing compiler using PKG_CFLAGS=
--------------------------- [ANTICONF] --------------------------------
Configuration failed because openssl was not found. Try installing:
 * deb: libssl-dev (Debian, Ubuntu, etc)
 * rpm: openssl-devel (Fedora, CentOS, RHEL)
 * csw: libssl_dev (Solaris)
 * brew: openssl@1.1 (Mac OSX)
If openssl is already installed, check that 'pkg-config' is in your
PATH and PKG_CONFIG_PATH contains a openssl.pc file. If pkg-config
is unavailable you can set INCLUDE_DIR and LIB_DIR manually via:
R CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'
-------------------------- [ERROR MESSAGE] ---------------------------
tools/version.c:1:10: fatal error: openssl/opensslv.h: No such file or directory
    1 | #include <openssl/opensslv.h>
      |          ^~~~~~~~~~~~~~~~~~~~
compilation terminated.
--------------------------------------------------------------------
ERROR: configuration failed for package ‘s2’
* removing ‘/usr/local/lib/R/site-library/s2’
```

### `units`

```{.r code-line-numbers="8-11"}
* installing *source* package ‘units’ ...
** package ‘units’ successfully unpacked and MD5 sums checked
** using staged installation
configure: units: 0.8-5
...
configure: error:
--------------------------------------------------------------------------------
  Configuration failed because libudunits2.so was not found. Try installing:
    * deb: libudunits2-dev (Debian, Ubuntu, ...)
    * rpm: udunits2-devel (Fedora, EPEL, ...)
    * brew: udunits (OSX)
  If udunits2 is already installed in a non-standard location, use:
    --configure-args='--with-udunits2-lib=/usr/local/lib'
  if the library was not found, and/or:
    --configure-args='--with-udunits2-include=/usr/include/udunits2'
  if the header was not found, replacing paths with appropriate values.
  You can alternatively set UDUNITS2_INCLUDE and UDUNITS2_LIBS manually.
--------------------------------------------------------------------------------

See `config.log' for more details
ERROR: configuration failed for package ‘units’
* removing ‘/usr/local/lib/R/site-library/units’
```
### `gdal`

```{.r code-line-numbers="6-9"}
* installing *source* package ‘sf’ ...
** package ‘sf’ successfully unpacked and MD5 sums checked
** using staged installation
configure: CC: gcc
configure: CXX: g++ -std=gnu++17
checking for gdal-config... no
no
configure: error: gdal-config not found or not executable.
ERROR: configuration failed for package ‘sf’
* removing ‘/usr/local/lib/R/site-library/sf’

The downloaded source packages are in
	‘/tmp/Rtmp8bqjb0/downloaded_packages’
Warning message:
In install.packages("sf") :
  installation of package ‘sf’ had non-zero exit status
```

:::

## bonus complication

runtime dependencies

::: panel-tabset

### :white_check_mark:

```{.r}
> library(sf)
Linking to GEOS 3.12.2, GDAL 3.9.1, PROJ 9.4.1; sf_use_s2() is TRUE
```

### :x:

```{.r}
The downloaded source packages are in
	‘/tmp/RtmpIvTerY/downloaded_packages’
> library(sf)
Error: package or namespace load failed for ‘sf’ in dyn.load(file, DLLpath = DLLpath, ...):
 unable to load shared object '/usr/local/lib/R/site-library/units/libs/units.so':
  libudunits2.so.0: cannot open shared object file: No such file or directory
```
:::

## which sysdeps?

![](img/p3m-sysdeps.png)

## activity

::: question
install a package from r-universe
:::

::: small
1.  open the `wtf-explore-libraries` project from earlier

2.  `install.packages("gitcellar")` \# not on cran!

3.  update your project `.Rprofile`:\
    `usethis::edit_r_profile(scope = "project")`

    ``` {.r code-line-numbers="false"}
    options(repos = c(
      ropensci = "https://ropensci.r-universe.dev",
      CRAN = "https://cloud.r-project.org", # macOS
      P3M = "https://p3m.dev/cran/latest" # windows
    ))
    ```

4.  save `.Rprofile` and restart R

5.  `install.packages("gitcellar")`
:::

{{< countdown "5:00" >}}

## discussion

-   did you install `gitcellar` from binary or source?
    -   How do you know?

## wrapping up

binaries are usually preferred, but for development versions of packages, you may need to install from source.

# creating reproducible environments

## why?

put some science in ["data science"](https://www.getdbt.com/coalesce-2021/down-with-data-science)

## [reproducibility strategies](https://environments.rstudio.com/reproduce)

```{r}
library(ggplot2)
library(tibble)
library(ggrepel)
mm <- tribble(
  ~x, ~y, ~label, ~Description, ~status,
  0.1, 0.1, 'Validated', 'Admins test and approve \n a subset of CRAN', TRUE,
  0.5, 0.5, 'Shared Baseline', 'All or most of CRAN, \n updated with R versions, \n tied to a system library', TRUE,
  0.5, 0.75, 'Wild West', 'Open access, \n not reproducible, \n how we learn', FALSE,
  0.8,0.8, 'Snapshot', 'Open access, user or system \n records per-project dependencies', TRUE,
  0.75, 0.2, 'Blocked', 'Backdoor package access, \n offline systems without a strategy', FALSE,
  0.2, 0.8, 'Ticket System', 'Admins involved, \n no testing, \n slow updates, \n high risk of breakage', FALSE
)
bad1 <- tribble(
  ~x, ~y, ~label, ~Description, ~status,
  0, 0.2, NA, NA, NA,
  0, 1,NA, NA, NA,
  0.8, 1, NA, NA, NA
)
bad2 <- tribble(
  ~x, ~y, ~label, ~Description, ~status,
  0.2, 0, NA, NA, NA,
  1, 0,NA, NA, NA,
  1, 0.8, NA, NA, NA
)
good <- tribble(
  ~x, ~y, ~label, ~Description, ~status,
  0, -0.2,NA, NA, NA,
  1, 0.8, NA, NA, NA,
  0.8, 1, NA, NA, NA,
  0, 0.2, NA, NA, NA
)
good2 <- tribble(
  ~x, ~y, ~label, ~Description, ~status,
  0, 0,NA, NA, NA,
  0, 0.2, NA, NA, NA,
  1, 0.8, NA, NA, NA,
  0.2, 0, NA, NA, NA
)
p <- ggplot(mm, aes(x, y)) + 
  geom_abline(slope = 1, intercept = 0.2, alpha = 0.2) + 
  geom_polygon(aes(x,y, text = Description), fill = "red", data=bad1, alpha = 0.1) + 
  geom_polygon(aes(x,y, text = Description), fill = "green", data=good, alpha = 0.1) + 
  geom_polygon(aes(x,y, text = NULL), fill = "green", data=good2, alpha = 0.1) + 
  geom_polygon(aes(x,y, text = Description), fill = "red", data=bad2, alpha = 0.1) +
  geom_abline(slope = 1, intercept = -0.2, alpha = 0.2) + 
  geom_point(aes(x, y, color = status, text = Description)) + 
  geom_text(aes(x, y, label = label), nudge_y = 0.025, nudge_x  = 0.025) + 
  scale_x_continuous(limits = c(0,1), breaks = seq(0,1,0.25), labels = c("Admins","", "", "", "Users")) +
  scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.25), labels =  c("Locked Down","", "", "", "Open")) +
  theme_minimal() + 
  scale_color_manual(breaks = NULL, values = c("#ff0000","#a3c586")) + 
  labs(
    x = "Who is Responsible for Reproducing the Environment?",
    y = "Package Access",
    color = NULL,
    title = "Reproducing Environments: Strategies and Danger Zones"
  )
p
```

## [reproducibility strategies](https://environments.rstudio.com/reproduce) {transition="none"}

```{r}
p + annotate("rect", xmin = .75, xmax = .95, ymin = .75, ymax = .95, alpha = .2)
```

::: notes
we're focused in particular on systems where we have both access and responsibility
:::

## tools

::: columns
::: column
### p3m

::: r-stack
![](img/icon-rspm.png){.r-stretch}
:::
:::

::: column
### renv

::: r-stack
![](img/renv-small.png){.r-stretch}
:::
:::
:::

::: notes
renv has a number of tools that are helpful for adopting a project-based workflow: 
- lockfile records what packages you use and where you instaled them from 
- `renv::install()` can handle installation from remote sources, local sources, package versions, bioconductor, rspm
- per-project library isolation with global package cache 
- makes it easy to install experimental versions of packages and then roll back to a stable release if it doesn't work out
:::

## p3m

::: r-stack
![](img/icon-rspm.png){.r-stretch}
:::

## p3m: latest

![](img/p3m-latest.png)

## p3m: date-based snapshots

![](img/rspm-2021-03-31-highlight.png)

## activity

::: question
time travel!
:::

1.  open the `wtf-explore-libraries` project
2.  run `packageVersion("dplyr")`

3.  update your project `.Rprofile` with a date-based snapshot of CRAN

    ``` {.r code-line-numbers="false"}
    options(repos = c(RSPM = "https://p3m.dev/cran/2022-12-31"))
    ```

4.  Restart R

5.  `install.packages("dplyr")`

what version of dplyr did you install?

{{< countdown "5:00" >}}

##  ⏪

- remove the repository configuration from your project `.Rprofile`
- restart R
- reinstall whatever versions of dplyr you were using before

if that process seems silly, :sparkles: [you should use `renv`](https://github.com/edavidaja/you-should-use-renv) :sparkles:

## renv

::: r-stack
![](img/renv-small.png){.r-stretch}
:::

## shared project environment

::: {data-id="env"}
```{mermaid}
%%{init: {"theme": "dark" } }%%
graph
L --- P1
L --- P2
L --- P3
L(library)
P1(project1)
P2(project2)
P3(project3)
```
:::

::: notes
-   by default all of your packages are installed into your user library
-   the unforunate default behavior in macOS is also that this is the system library
-   updating a package in the shared environments updates it for *all* of your projects
:::

<br/>

### `.libPaths()`

``` {.r code-line-numbers="false"}
> .libPaths()
[1] "C:/Users/edavi/AppData/Local/R/win-library/4.4" # user
[2] "C:/Program Files/R/R-4.4.0/library" # system
```

## isolated project environments

::: {data-id="env"}
```{mermaid}
%%{init: {"theme": "dark" } }%%
graph
C --- L1
C --- L2
C --- L3
L1 --- P1
L2 --- P2
L3 --- P3
L1(library1)
L2(library2)
L3(library3)
P1(project1)
P2(project2)
P3(project3)
C(global cache)
```
:::

<br/>

### `.libPaths()`

``` {.r code-line-numbers="false"}
- Project '~/sample-project' loaded. [renv 1.0.7]
> .libPaths()
[1] "C:/Users/edavi/Documents/sample-project/renv/library/windows/R-4.4/x86_64-w64-mingw32"        
[2] "C:/Users/edavi/AppData/Local/R/cache/R/renv/sandbox/windows/R-4.4/x86_64-w64-mingw32/88765555"
```

## isolated project environments

-   experiment with new packages without breaking other projects
-   share exactly which versions you're using with your team or future you
-   re-use packages you've already installed

## activity

::: question
create an isolated project library
:::

```{.r}
usethis::create_project("wtf-2024")
install.packages("renv")
renv::init()
renv::status()
```
{{< countdown "3:00" >}}

## activity

::: question
manage dependencies
:::

add `library(parallelly)` to any file in the `wtf-2024/R` directory

```{.r}
renv::status()
install.packages("parallelly")
renv::status()
renv::snapshot()
```
remove `library(parallelly)` from the file you added it to

```{.r}
renv::status()
```

{{< countdown "5:00" >}}

::: notes
run `.libPaths()` to see what your default package libraries are initialize an renv--you'll see that the environment is now local to the project note the .Rprofile that gets placed into your project, which runs an R script in `renv/activate.R` deactivate the environment and check libPaths() again--it should be back to normal
:::

## `renv.lock` {visibility="hidden"}

``` json
{
  "R": {
    "Version": "4.1.2",
    "Repositories": [
      {
        "Name": "CRAN",
        "URL": "https://cloud.r-project.org"
      }
    ]
  },
  "Packages": {
    [...]
    "knitr": {
      "Package": "knitr",
      "Version": "1.39",
      "Source": "Repository",
      "Repository": "CRAN",
      "Hash": "029ab7c4badd3cf8af69016b2ba27493",
      "Requirements": [
        "evaluate",
        "highr",
        "stringr",
        "xfun",
        "yaml"
      ]
    },
    ...
  }
}
```

::: notes
created from `renv::snapshot()` by default, identifies dependencies of your code for example: usethis doesn't usually appear in my lockfiles, because I'm running it interactively, rather than making it a dependency of my projects
:::

## `renv::install()`

or [`install.packages()`](https://rstudio.github.io/renv/articles/renv.html#shims) with shims enabled

``` r
renv::install("jsonlite")
renv::install("jsonlite@1.2") # at version
renv::install("jeroen/jsonlite") # latest
renv::install"jeroen/jsonlite@80854359976250f30a86a6992c0d8c3b3d95473d") # at SHA
renv::install("path/to/package") # local source
```

<hr>

::: fragment
``` r
devtools::install("jsonlite")
devtools::install_version("jsonlite@1.2") # at version
devtools::install_github("jeroen/jsonlite") # latest
devtools::install_github("jeroen/jsonlite@80854359976250f30a86a6992c0d8c3b3d95473d") # at SHA
devtools::install("path/to/package") # local source
```
:::

## the junk drawer

for reprexes, tweets, and other ephemera:

`~/Documents/scratch`

::: notes
I use `renv` for everything, and have one junk project into which I install things without regard for stability or reproducibility
:::

# installing / upgrading R

## why

::: r-stack
![](img/project-oyster-greyed.svg){.r-stretch}
:::

## why

::: r-stack
![](img/project-oyster.svg)
:::

## bigger context

::: r-stack
![](img/r-project-oyster.svg)
:::

## practice makes perfect

::: panel-tabset
### Windows 10+

[Windows Sandbox](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-sandbox/windows-sandbox-overview)

### macOS

[tart](https://tart.run/)  
[utm](https://mac.getutm.app/)


### Linux

[Multipass](https://multipass.run/)\
[Digital Ocean](https://www.digitalocean.com/)\
[Linode](https://www.linode.com/)
:::

::: notes
The best way to become more comfortable with installing things is to practice in an environment you can throw away
- the windows sandbox lets you test in an environment on your machine that won't affect your computer
- enabling it is outside the scope of this course
- for linux users, the easiest thing to do is stand up a small VPS
:::

## "run this command" \>\> clickOps

![](img/installing-R.png)

## package managers

software whose job it is to install other software
:hear_no_evil: not the same kinds of *packages* as PPM

|                                   | package manager                                |
|-----------------------------------|------------------------------------------------|
| {{< fa brands windows >}} windows | [scoop](https://scoop.sh/), chocolatey, winget |
| {{< fa brands apple >}} macOS     | [homebrew](https://brew.sh/)                   |
| {{< fa brands linux >}} linux     | [homebrew](https://brew.sh/), apt, yum, zypper |

## :warning:

Avoid installing your language with a package manager

::: notes
You want to avoid having the language version your projects are using changed out from you unexpectedly Tools for freezing installations with your package manager are not consistently effective Other software that you install with your package manager may expect that package manager to be running the latest Idiosyncracies of your language will be better understood by a dedicated tool
:::

## language managers

using your package manager, install [rig](https://github.com/r-lib/rig):

::: panel-tabset
### windows

``` {.bash code-line-numbers="false"}
scoop install rig
```

### \*nix

``` {.bash code-line-numbers="false"}
brew install rig
```
:::

::: small
language managers for other languages:

{{< fa brands python >}} [pyenv](https://github.com/pyenv/pyenv)  
{{< fa brands node-js >}} [nvm](https://github.com/nvm-sh/nvm)  
{{< fa brands rust >}} [rustup](https://rustup.rs/)  
{{< fa globe >}} [asdf](https://asdf-vm.com/)  
{{< fa globe >}} [mise-en-place](https://mise.jdx.dev/)
:::

::: notes
-   many language managers are often written in some language other than the one they are responsible for managing
:::

## switching R versions {{< fa brands windows >}} {visibility="hidden"}

### `CTRL +  CLICK`

::: r-stack
![](img/ctrl_click.png)
:::

## switching R versions {{< fa brands windows >}} {visibility="hidden"}


::: r-stack
![](img/r_version_select_windows-highlight.png)
:::

## list installed R versions

::: panel-tabset

### {{< fa brands windows >}}

```{.bash}
❯ rig list --help
Description:
  List installed R versions at `C:\Program Files\R`.
  It does _not_ check if they are working properly.

  `rig ls` is an alias.
```

### {{< fa brands apple >}}

```{.bash}
❯ rig list --help
Description:
  List installed R versions from `/Library/Framework/R.framework/Versions`.
  It does _not_ check if they are working properly.

  `rig ls` is an alias.
```

### {{< fa brands linux >}}

```{.bash}
❯ rig list --help
Description:
  List installed R versions from `/opt/R`. It does _not_ check if they are
  working properly.

  `rig ls` is an alias.
```

:::

## language versions

using `rig`, install a version of R:

```{.bash}
❯ rig install --help
Description:
  Download and install an R version, from the official sources.
  It keeps the already installed R versions, except versions within the
  same minor branch, see below.

Options:
      --without-cran-mirror
          Do not set the cloud CRAN mirror

      --without-pak
          Do not install pak.

      --pak-version <pak-version>
          pak version to install.

          [default: stable]
          [possible values: stable, rc, devel]

  -a, --arch <arch>
          Select macOS arch: arm64 or x86_64

          [default: arm64]
          [possible values: arm64, x86_64]

  -h, --help
          Print help (see a summary with '-h')

Examples:
  # Add the latest development snapshot
  rig add devel

  # Add the latest release
  rig add release

  # Install specific version
  rig add 4.1.2

  # Install latest version within a minor branch
  rig add 4.1

  # Install arm64 build of R (default on arm64 macs)
  rig add -a arm64 release

  # Install x86_64 build of R (default on x86_64 macs)
  rig add -a x86_64 release
```

::: notes
if you're running a distribution of linux that rig doesn't support: - https://docs.rstudio.com/resources/install-r/

if no pre-compiled binary of R is available: - https://docs.rstudio.com/resources/install-r-source/
:::

## switching default versions

```{.bash}
❯ rig switch --help
Description:
  Print or set the default R version. The default R version is the one that
  is started with the `R` command, usually via the `/usr/local/bin/R`
  symbolic link.

  `rig switch` is an alias of `rig default`.

Usage: rig default [OPTIONS] [version]

Arguments:
  [version]
          new default R version to set

Options:
      --json
          JSON output

  -h, --help
          Print help (see a summary with '-h')

Examples:
  # Query default R version
  rig default

  # Set the default version
  rig default 4.1
```

## launch rstudio

```{.bash}
❯ rig rstudio --help
Description:
  Start RStudio with the specified R version.

  If the RStudio project or the specified directory contains an `renv.lock`
  file (created by the renv package), and `version` is not specified, then
  rig will read the preferred R version from the `renv.lock` file.
  If the same exact version is not installed, then rig chooses
  the latest version with the same major and minor components. If no such
  version is available, rig throws an error.

Examples:
  # With default R version
  rig rstudio

  # With another R version
  rig rstudio 4.0

  # Open project with default R version
  rig rstudio cli.Rproj

  # Open renv project with the R version specified in the lock file
  rig rstudio projects/myproject/renv.lock

  # Open RStudio project with specified R version, either is good
  rig rstudio 4.0 cli.Rproj
  rig rstudio cli.Rproj 4.0

Usage: rig rstudio [version] [project-file]

Arguments:
  [version]
          R version to start

  [project-file]
          RStudio project file (.Rproj) to open
```

## activity

::: question
migrate a project from one R version to another
:::

1. use `renv::snapshot()` to create an `renv.lock` file
2. close RStudio
3. launch RStudio with a different R version
4. use `renv::restore()` to restore your project

{{< countdown "7:00" >}}