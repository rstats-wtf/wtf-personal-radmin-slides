---
author: "E. David Aja"
footer:  "[Personal R Administration](https://github.com/rstats-wtf/wtf-personal-radmin-slides)"
logo: "img/wtf-logo-square-transparent.png"
format: 
  revealjs: 
    theme: [night, slides.scss]
    highlight-style: a11y
    transition: fade
    slide-number: true
    chalkboard: true
    navigation-mode: linear
    controls: false
execute:
  freeze: auto
from: markdown+emoji
---

# personal R administration

throw your computer into the ocean with confidence

```{r setup}
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#FFFFFF",
    color_text                = "#7aa81e",
    color_running_background  = "#7aa81e",
    color_running_text        = "#FFFFFF",
    color_finished_background = "#ffa07a",
    color_finished_text       = "#FFFFFF",
    font_size = font_size,
    ...
  )
}
```

## Course material

::: r-fit-text
[rstd.io/wtf-2022-rsc](https://github.com/rstudio-conf-2022/wtf-rstats)
:::

## a brief personal history:

::: {.columns .scrollable}
::: {.column .fragment width="33%"}
### Auditor

::: r-fit-text
-   personal laptop {{< fa brands windows >}}
-   RStudio in Citrix {{< fa brands windows >}}
-   airgapped RStudio Server Pro {{< fa brands linux >}}
-   airgapped Shiny Server Pro {{< fa brands linux >}}
-   Special Issue Individual Laptop {{< fa brands windows >}} {{< fa brands linux >}}
-   Special Issue Individual Desktop {{< fa brands windows >}}
-   Special Issue Team Desktop {{< fa brands windows >}}
:::
:::

::: {.column .fragment width="33%"}
### Data Scientist

::: r-fit-text
-   personal laptop {{< fa brands windows >}}
-   work laptop {{< fa brands windows >}}
-   RStudio in Citrix {{< fa brands windows >}}
-   RStudio Server {{< fa brands linux >}}
:::
:::

::: {.column .fragment width="33%"}
### Solutions Engineer

::: r-fit-text
-   personal laptop {{< fa brands windows >}}
-   Work laptop {{< fa brands apple >}}
-   RStudio Workbench Demo Server {{< fa brands linux >}}
-   RStudio Workbench Internal Server {{< fa brands linux >}}
:::
:::
:::

::: notes
this is intended to provide context on my priorities / habits of thought: - it needs to work across operating systems - You can't depend on having pro features - avoid admin where possible - as portable as practical - audit context means I need to be able to reproduce exactly - "run this command" preferable to a confluence page of screenshots
:::

## How do I...

::: incremental
-   upgrade the version of R I'm using for this project?
-   know which package versions I'm using for this project?
-   move this project from one machine to another?
:::

::: notes
We're extending the lessons from Day 1 to think about what it means to work with R projects over time. That means that in addition to wanting our individual projects to flow smoothly, we also want to strategize about how to manage different versions of the language, different package versions, and different execution contexts. Working on an old project on a new computer is a lot like trying to put an app into production.
:::

## focus areas

::: agenda
-   installing R

-   starting R

::: agenda-active
-   installing R packages
:::

-   reproducible environments

-   upgrading R
:::

## practice makes perfect

::: panel-tabset
### Windows 10+

[Windows Sandbox](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-sandbox/windows-sandbox-overview)

### macOS

:shrug:

### Linux

[Multipass](https://multipass.run/)\
[Digital Ocean](https://www.digitalocean.com/)\
[Linode](https://www.linode.com/)
:::

::: notes
The best way to become more comfortable with installing things is to practice in an environment you can throw away - the windows sandbox lets you test in an environment on your machine that won't affect your computer - enabling it is outside the scope of this course - for linux users, the easiest thing to do is stand up a small VPS - I don't know of a good safe way to test mac environments
:::

# mental model

![](img/project-oyster.svg)

# installing R

::: agenda
::: agenda-active
-   installing R
:::

-   starting R

-   installing R packages

-   reproducible environments

-   upgrading R
:::

## "software managers"

software whose job it is to install other software


| Operating system | Recommended |
|------------------|-------------------------------|
| {{< fa brands windows >}} windows          | **scoop**, chocolatey, winget |
| {{< fa brands apple >}} macOS            | **homebrew**                  |
| {{< fa brands linux >}} linux            | apt, yum, zypper              |

## :warning:

Avoid installing your language with a package manager

::: notes
You want to avoid having the language version your projects are using changed out from you unexpectedly Tools for freezing installations with your package manager are not consistently effective Other software that you install with your package manager may expect that package manager to be running the latest Idiosyncracies of your language will be better understood by a dedicated tool
:::

## clickOps

![](img/installing-R.png)

## rig

<https://github.com/r-lib/rig/>

## language managers

using your package manager, install a language manager

::: panel-tabset
### windows

``` powershell
scoop install rig
```

### \*nix

``` bash
brew install rig
```
:::

<small> pyenv\
nvm\
</small>

::: notes
-   many language managers are often written in some language other than the one they are responsible for managing
:::

## language versions

using your language manager, install a language version:

``` shell
‚ùØ rig install --help
rig-add

DESCRIPTION:
    Download and install an R version, from the official sources.
    It keeps the already installed R versions, except versions within the
    same minor branch, see below.

EXAMPLES:
    # Add the latest release
    rig add release

    # Install specific version
    rig add 4.1.2

    # Install latest version within a minor branch
    rig add 4.1
```

::: notes
if you're running a distribution of linux that rig doesn't support: - https://docs.rstudio.com/resources/install-r/

if no pre-compiled binary of rig is available: - https://docs.rstudio.com/resources/install-r-source/
:::

## environment managers

using your desired version of the language, install an environment manager:

``` r
install.packages("renv")
```

## project

using your environment manager, install your project's dependencies:

-   create a new environment

    ``` r
    renv::init()
    ```

-   restore a pre-defined environment

    ``` r
    renv::restore()
    ```

## activity {.smaller}

::: question
1.  read the [rig FAQ](https://github.com/r-lib/rig#-faq), or the [rswitch guide](https://rud.is/rswitch/guide/)

2.  install a different major/minor version of R

    -   <https://cran.r-project.org/bin/macosx/>

    -   <https://cran.r-project.org/bin/windows/base/old/>

3.  install `rig`

    -   use \`rig to install a different major or minor version of R

    -   open RStudio with that newly installed R version
:::

```{r}
countdown(minutes = 1)
```

# starting R

::: agenda
-   installing R

::: agenda-active
-   starting R
:::

-   installing R packages

-   reproducible environments

-   upgrading R
:::

## Editing `.Renviron` and `.Rprofile`

Tip: Use the `usethis` package for easy shortcuts to edit your profile and environment files:

``` r
usethis::edit_r_profile()
usethis::edit_r_environ()
```

## R startup sequence (detail) {.smaller background-color="#cccccc"}

![](img/R-startup.svg)

::: notes
Scopes: - system: (usually suffixed by `.site`, per version of R) - user - project

user scoped `.Rprofile` and `.Renviron` content is applied *last*
:::

## :warning: Remember to use a newline

::: columns
::: column
`.Renviron` and `.Rprofile` **must** end in a newline.
:::

::: column
![](img/insert-newline-end.png)
:::
:::

::: notes
R will silently throw away the last line if you don't do this
:::

## `.Renviron`

:white_check_mark: R-specific environment variables\
:white_check_mark: API keys\
:x: R code

## example `.Renviron`

-   project short circuits home?

``` bash
R_HISTSIZE=100000
GITHUB_PAT=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
CONNECT_API_KEY=DaYK2hBUriSBYUEGIAiyXsRJHSjTYJN3
RETICULATE_PYTHON=.venv/bin/python
```

-   accessing things once they're in the R environ

`Sys.getenv()`

::: notes
the keys have already been burned, don't worry
:::

## `.Rprofile`

interactive helpers that run in every session

## what to put in `.Rprofile`

-   set a default CRAN mirror
-   write a welcome message
-   customize R prompt
-   selectively change (but be careful)
    -   options, screen width, numeric display
    -   load frequently used interactive packages
    -   aliases / shortcuts for frequently used functions
-   you don't typically share `.Rprofiles`

::: notes
\``rlrang::entrace()` so base errors get better context?
:::

## why shouldn't these go in `.Rprofile`?

::: incremental
-   `options(stringsAsFactors = FALSE)`
-   `library(tidyverse)`
-   `library(ggplot2)`
-   `f <- dplyr::filter`
-   `theme_set(theme_bw())`
:::

## dev dependencies

If something appears in a script, it **should not** be in `.Rprofile`

## activity

::: question
why can these go in `.Rprofile`?
:::

<br>

``` r
library(usethis)
library(devtools)
```

```{R}
countdown_timer(minutes = 1, bottom = 0)
```

## andrie's `.Rprofile`

``` r
# Set CRAN mirror
if (R.version$status == "Under development (unstable)") {
  options(repos = c(CRAN = "https://cloud.r-project.org/"))
} else {
  options(repos = c(CRAN = "https://packagemanager.rstudio.com/all/latest"))
}

# Set the executable for GhostScript
if (.Platform$OS.type == "windows") {
  Sys.setenv(R_GSCMD = Sys.which("gswin64c"))
}
```

## comparing `.Renviron` to `.Rprofile`

## activity

::: question
find `.Rprofile` examples on github and add something to yours
:::

```{R}
countdown_timer(minutes = 3, bottom = 0)
```

# installing R packages

::: agenda
-   installing R

-   starting R

::: agenda-active
-   installing R packages
:::

-   reproducible environments

-   upgrading R
:::

## types of R packages

-   Binary
-   Source

## binary

-   compiled ahead of time
-   only R is needed to install

## where to get binaries

|                                   |        CRAN        | RStudio Package Manager\* |
|------------------------|:----------------------:|:----------------------:|
| {{< fa brands windows >}} windows | :white_check_mark: |    :white_check_mark:     |
| {{< fa brands apple >}} mac OS    | :white_check_mark: |            :x:            |
| {{< fa brands linux >}} linux     |        :x:         |    :white_check_mark:     |

<br>

\* [RStudio Package Manager](https://packagemanager.rstudio.com/)

## source

-   compiled in development environment
-   requires extra tools when package uses C, C++ or Fortran

::: notes
One additional complication for \*nix users: generally on windows can install and load packages that depend on other lower level libraries quite easily. Explain installing `sf`, for example.
:::

## if you don't have tools

``` {.r code-line-numbers="11"}
Running `R CMD build`...
* checking for file 'C:\Users\WDAGUtilityAccount\AppData\Local\Temp\RtmpkTUH61\remotes192027624804\tidyverse-dplyr-36ef054/DESCRIPTION' ... OK
* preparing 'dplyr':
* checking DESCRIPTION meta-information ... OK
* cleaning src
* installing the package to process help pages
      -----------------------------------
* installing *source* package 'dplyr' ...
** using staged installation
** libs
Warning in system(cmd) : 'make' not found
ERROR: compilation failed for package 'dplyr'
* removing 'C:/Users/WDAGUT~1/AppData/Local/Temp/Rtmp6hYuyV/Rinst1334d1a23d1/dplyr'
      -----------------------------------
ERROR: package installation failed
```

## get the tools

::: panel-tabset
### windows

[Rtools](https://cran.r-project.org/bin/windows/Rtools/)

``` shell
rig add rtools
```

### macOS

XCode

``` shell
xcode-select --install
```

or download from the [Mac App Store](https://apps.apple.com/us/app/xcode/id497799835?mt=12)

### linux

install tools via "software manager"

``` shell
apt install ...
yum install ...
```
:::

## got tools?

``` r
devtools::has_devel()
## Your system is ready to build packages!
```

## activity

::: question
install a package from source
:::

<br>

``` r
install.packages("jsonlite", type = "source")
```

```{R}
countdown_timer(minutes = 3, bottom = 0)
```

# reproducible environments

::: agenda
-   installing R

-   starting R

-   installing R packages

::: agenda-active
-   reproducible environments
:::

-   upgrading R
:::

## environments

<https://environments.rstudio.com>

## spectrum

```{r spectrum, echo = FALSE, fig.height=5, fig.width=8}
library(ggplot2)
library(tibble)
timeline <- tribble(
  ~x, ~y, 
  0, 1,
  16, 1
)
labels <- tribble(
  ~x, ~y, ~label,
  0, 1.1, "No Strategy",
  4, 1.1, "Awareness",
  8, 1.1, "Shared Baseline",
  12, 1.1, "Record & Restore",
  16, 1.1, "Validated",
)
details <- tribble(
  ~x, ~y, ~label,
  0, 0.9, "scary upgrades \n no sharing \n old stuff is broken",
  4, 0.9, "reprex \n sessioninfo() \n devtools::session_info()", 
  8, 0.9, "site library \n frozen repo",
  12, 0.9, "renv",
  16, 0.9, "internal repo \ncustom tests"
)
ggplot() + 
  geom_path(data = timeline, aes(x,y),  color = "black") + 
  geom_label(data = labels, aes(x,y,label=label)) + 
  geom_text(data = details, aes(x,y,label=label)) + 
  theme_minimal() + 
  scale_x_continuous(breaks = NULL, limits = c(-2,17)) + 
  scale_y_continuous(breaks = NULL, limits = c(0.5, 1.5)) + 
  labs(
    title = NULL,
    x = NULL,
    y = NULL
  )
```

## renv

![](img/renv.png){.r-stretch}

::: notes
renv has a number of tools that are helpful for adopting a project-based workflow: - lockfile records what packages you use and where you instaled them from - `renv::install()` can handle installation from remote sources, local sources, package versions, bioconductor, rspm - per-project library isolation with global package cache makes it easy to install experimental versions of packages and then roll back to a stable release if it doesn't work out
:::

## `renv::init()`

``` {.r code-line-numbers="|2|4"}
.libPaths()
renv::init()
.libPaths()
renv::deactivate()
.libPaths()
```

::: notes
run `.libPaths()` to see what your default package libraries are initialize an renv--you'll see that the environment is now local to the project note the .Rprofile that gets placed into your project, which runs an R script in `renv/activate.R` deactivate the environment and check libPaths() again--it should be back to normal
:::

## `renv.lock`

``` json
{
  "R": {
    "Version": "4.1.2",
    "Repositories": [
      {
        "Name": "CRAN",
        "URL": "https://cloud.r-project.org"
      }
    ]
  },
  "Packages": {
    [...]
    "knitr": {
      "Package": "knitr",
      "Version": "1.39",
      "Source": "Repository",
      "Repository": "CRAN",
      "Hash": "029ab7c4badd3cf8af69016b2ba27493",
      "Requirements": [
        "evaluate",
        "highr",
        "stringr",
        "xfun",
        "yaml"
      ]
    },
    ...
  }
}
```

::: notes
created from `renv::snapshot()` by default, identifies dependencies of your code for example: usethis doesn't usually appear in my lockfiles, because I'm running it interactively, rather than making it a dependency of my projects
:::

## `renv::install()`

or [`install.packages()`](https://rstudio.github.io/renv/articles/renv.html#shims) with shims enabled

``` r
renv::install("jsonlite")
renv::install("jsonlite@1.2") # at version
renv::install("jeroen/jsonlite") # latest
renv::install("jeroen/jsonlite@80854359976250f30a86a6992c0d8c3b3d95473d") # at SHA
renv::install("path/to/package") # local source
```

<hr>

::: fragment
``` r
devtools::install()
devtools::install_version()
devtools::install_github()
devtools::install_github()
devtools::install("path/to/package")
```
:::

## the junk drawer

for reprexes, tweets, and other ephemera:

`~/Documents/scratch`

::: notes
I use `renv` for everything, and have one junk project into which I install things without regard for stability or reproducibility
:::

## rig

launch rstudio from an `renv` lockfile:

``` shell
rig rstudio path/to/renv.lock
```

## activity

::: question
-   install dev `jsonlite`, then roll back to released version
:::

```{R}
countdown_timer(minutes = 1, bottom = 0)
```

# upgrading R

::: agenda
-   installing R

-   starting R

-   installing R packages

-   reproducible environments

::: agenda-active
-   upgrading R
:::
:::

## rig + renv

1.  snapshot the project library with `renv`
2.  install a new version of R
3.  restore the project library in the new R version
