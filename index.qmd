---
author: "E. David Aja"
footer:  "[Personal R Administration](https://github.com/rstats-wtf/wtf-personal-radmin-slides)"
logo: "img/wtf-logo-square-transparent.png"
format: 
  revealjs: 
    theme: [night, slides.scss]
    highlight-style: a11y
    transition: fade
    slide-number: true
    chalkboard: true
    navigation-mode: linear
    controls: false
    mermaid-format: svg
execute:
  freeze: auto
from: markdown+emoji
---

# personal R administration {.agenda}

throw your computer into the ocean with confidence

```{r setup}
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#FFFFFF",
    color_text                = "#7aa81e",
    color_running_background  = "#7aa81e",
    color_running_text        = "#FFFFFF",
    color_finished_background = "#ffa07a",
    color_finished_text       = "#FFFFFF",
    font_size = font_size,
    ...
  )
}
```

## Course material

::: r-fit-text
[rstd.io/wtf-2022-rsc](https://github.com/rstudio-conf-2022/wtf-rstats)
:::

## create a project

::: {.r .r-fit-text}
`usethis::create_project("~/personal-radmin")`
:::

## a brief personal history:

::: {.columns .scrollable}
::: {.column .fragment width="33%"}
### Auditor

::: r-fit-text
-   personal laptop {{< fa brands windows >}}
-   RStudio in Citrix {{< fa brands windows >}}
-   airgapped RStudio Workbench {{< fa brands linux >}}
-   airgapped Shiny Server Pro {{< fa brands linux >}}
-   Special Issue Individual Laptop {{< fa brands windows >}} {{< fa brands linux >}}
-   Special Issue Individual Desktop {{< fa brands windows >}}
-   Special Issue Team Desktop {{< fa brands windows >}}
:::
:::

::: {.column .fragment width="33%"}
### Data Scientist

::: r-fit-text
-   personal laptop {{< fa brands windows >}}
-   work laptop {{< fa brands windows >}}
-   RStudio in Citrix {{< fa brands windows >}}
-   RStudio Server {{< fa brands linux >}}
:::
:::

::: {.column .fragment width="33%"}
### Solutions Engineer

::: r-fit-text
-   personal laptop {{< fa brands windows >}}
-   work laptop {{< fa brands apple >}}
-   RStudio Workbench Demo Server {{< fa brands linux >}}
-   RStudio Workbench Internal Server {{< fa brands linux >}}
:::
:::
:::

::: notes
this is intended to provide context on my priorities / habits of thought: 
- it needs to work across operating systems
- You can't depend on having pro features 
- avoid admin where possible 
- as portable as practical 
- audit context means I need to be able to reproduce exactly 
- "run this command" preferable to a confluence page of screenshots
:::

## How do I...

::: incremental
-   upgrade the version of R I'm using for this project?
-   track which package versions I'm using for this project?
-   move this project from one machine to another?
:::

::: notes
We're extending the lessons from Day 1 to think about what it means to work with R projects over time.  
That means that in addition to wanting our individual projects to flow smoothly, we also want to strategize about how to manage different versions of the language, different package versions, and different execution contexts. Working on an old project on a new computer is a lot like trying to put an app into production.
:::

## agenda {.agenda}

-   starting R
-   installing R packages
-   reproducible environments
-   installing / upgrading R


# agenda {.agenda}

-   starting R :arrow_left:
-   installing R packages
-   reproducible environments
-   installing / upgrading R

## why?

Sometimes we want to change the way our code behaves _without_ having to change the code.

::: notes
behaves might mean  
- "what computer do I think I'm on"
- "is this dev or prod"?
:::

## R startup sequence {.smaller background-color="#cccccc"}

::: r-stack
![](img/R-startup.svg)
:::

## R startup sequence (our focus) {.smaller background-color="#cccccc"}

::: r-stack
![](img/r-startup-focus.svg)
:::

## :warning: Use a newline

::: columns
::: column
startup files **must** end in a newline.
<br/>
<br/>

R may silently throw away the last line if you don't do this.
:::

::: column
![](img/insert-newline-end-highlight.png)
:::
:::

## `.Renviron`

environment variables

> a [...] named value that can affect the way running processes will behave on a computer

## what goes in `.Renviron`

:white_check_mark: R-specific environment variables  
:white_check_mark: API keys or other secrets  
:x: R code  

## Editing `.Renviron`

::: {.r .r-fit-text}
`usethis::edit_r_environ(scope = ?)`
:::

:::: columns
::: {.column width="40%"}
### user
`~/.Renviron`
:::

::: {.column width="60%"} 
### project
`path/to/your/project/.Renviron`
:::
::::

## example `.Renviron`

### user

```bash
PATH="${RTOOLS40_HOME}\usr\bin;${PATH}" # windows users
GITHUB_PAT=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
CONNECT_API_KEY=DaYK2hBUriSBYUEGIAiyXsRJHSjTYJN3
R_HISTSIZE=100000
```
<br/>

### project

```bash
RETICULATE_PYTHON=.venv/bin/python
DB_USER=elephant
DB_PASS=p0stgr3s
```

user and project scopes are _additive_  
if values clash, _project_ wins

## read environment variables

::: {.r .r-fit-text}
`Sys.getenv()`
:::

## activity

::: panel-tabset

### edit your user `.Renviron` {.smaller}

1. `usethis::edit_r_environ()`
1. add `WTF_USER=<your name>`
1. restart your R session  
  `CTRL + SHIFT + F10`  
  `CMD  + SHIFT + 0 `
1. Retrieve the value of WTF_USER 
    `Sys.getenv("WTF_USER")`

### edit your project `.Renviron` {.smaller}

1. `usethis::edit_r_environ("project")`
1. add `WTF_PROJECT=<your name>`
1. restart your R session  
  `CTRL + SHIFT + F10`  
  `CMD  + SHIFT + 0 `
1. Retrieve the value of WTF_PROJECT
    `Sys.getenv("WTF_PROJECT")`

### handle a collision {.smaller}

1. `usethis::edit_r_environ()`
1. add `WTF_DAVID=user`
1. `usethis::edit_r_environ("project")`
1. add `WTF_DAVID=project`
1. restart your R session
1. retrieve the value of WTF_DAVID 

:::

```{R}
countdown_timer(minutes = 10, bottom = 0)
```

## `.Rprofile`

R code that runs at the start of each session

## ?interactive()

:::: columns
::: column

### `TRUE`

:technologist:
<br/>

- sending individual lines of code to the console

<br/>
<br/>

::: fragment
:point_up: most `.Rprofile` customization
:::

:::

::: column

### `FALSE`

:robot: 
<br/>

- knitting an RMarkdown document  
- `R -e script.R`

:::
::::


## what to put in `.Rprofile`

-   set a default CRAN mirror
-   customize [R prompt](https://github.com/gaborcsardi/prompt/)
-   selectively change (but be careful)
    -   options, screen width, numeric display
    -   load frequently used interactive packages
    -   aliases / shortcuts for frequently used functions

## what not to put in `.Rprofile`

If it matters for code you share, it **should not** be in `.Rprofile`

## why shouldn't these go in `.Rprofile`?

::: incremental
-   `options(stringsAsFactors = FALSE)`
-   `library(tidyverse)`
-   `f <- dplyr::filter`
-   `theme_set(theme_bw())`
:::

## discuss with your neighbor

::: question
Why might these be safe to put in `.Rprofile`?
:::

<br>

``` r
library(usethis)
library(devtools)
```

```{R}
countdown_timer(minutes = 2, bottom = 0)
```

## dotfiles

::: r-fit-text
https://github.com/search?q=.Rprofile
:::

## activity

::: panel-tabset

### edit your user `.Rprofile` {.smaller}

1. `usethis::edit_r_profile()`
1. add `print("from my user Rprofile")`
1. restart your R session  
  `CTRL + SHIFT + F10`  
  `CMD  + SHIFT + 0 `
1. what value is printed when you restart?

### edit your project `.Rprofile` {.smaller}

1. `usethis::edit_r_profile("project")`
1. add `print("from my project Rprofile")`
1. restart your R session  
  `CTRL + SHIFT + F10`  
  `CMD  + SHIFT + 0 `
1. what value is printed when you restart?

:::

```{R}
countdown_timer(minutes = 5, bottom = 0)
```

::: fragment
project `.Rprofile` "short-circuits"  
if it exists, your user `.Rprofile` will not be evaluated
:::

## wrapping up

:::: columns
::: column

### `.Renviron`

- secrets
- environment information

:::

::: column

### `.Rprofile`

- development dependencies

:::
::::

# agenda {.agenda}

-   starting R :white_check_mark:
-   installing R packages :arrow_left:
-   reproducible environments
-   installing / upgrading R

## why

::: r-stack
![](img/slacking-tidyverse.png)
:::

::: notes
having a reason to slack off is fun but being able to get your work done quickly is more fun
:::

## states of R packages

```{mermaid}
%%{init: {"theme": "dark" } }%%
graph TD
Source -- "devtools::build()" --> Bundled
Bundled -- "devtools::build(binary = TRUE)"--> Binary 
Binary --"install.packages()"--> Installed 
Installed --"library()"--> Loaded 
```

::: aside
[R Packages -- Structure](https://r-pkgs.org/Structure.html)
:::

## states of R packages

```{mermaid}
%%{init: {"theme": "dark" } }%%
flowchart TD
subgraph dev
  direction LR
Source -- "devtools::build()" --> Bundled
Bundled -- "devtools::build(binary = TRUE)"--> Binary 
end
subgraph use
direction LR
Binary --"install.packages()"--> Installed 
Installed --"library()"--> Loaded 
end
```

::: aside
[R Packages -- Structure](https://r-pkgs.org/Structure.html)
:::


::: notes

- show how to set options for different environment managers
- Install package from github
- Develop your own packages
:::

## Binary

-   compiled ahead of time
-   easiest / fastest to install

::: notes
you may particularly care about installation speed if you're being billed by the minute for compute time, or if you need computations to finish before a timeout
:::

## where to get binaries

|                                   |        CRAN        | Public RStudio \n Package Manager   |
|-----------------------------------|:------------------:|:-------------------------:|
| {{< fa brands windows >}} windows | :white_check_mark: |    :white_check_mark:     |
| {{< fa brands apple >}} mac OS    | :white_check_mark: |            :x:            |
| {{< fa brands linux >}} linux     |        :x:         |    :white_check_mark:     |

## are binaries available?

## CRAN

![](img/connectapi-cran-binary-highlight.png)

## may not be the latest

![](img/parallelly-versions-highlight.png)

## may not be the latest

```{.r code-line-numbers="6-8"}
> install.packages("parallelly", repos = "https://cran.rstudio.com")

Installing package into ‘C:/Users/WDAGUtilityAccount/Documents/R/win-library/4.0’
(as ‘lib’ is unspecified)

  There is a binary version available but the source version is later:
           binary source needs_compilation
parallelly 1.31.0 1.32.1             FALSE

installing the source package ‘parallelly’

trying URL 'https://cran.rstudio.com/src/contrib/parallelly_1.32.1.tar.gz'
Content type 'application/x-gzip' length 124853 bytes (121 KB)
downloaded 121 KB

* installing *source* package 'parallelly' ...
** package 'parallelly' successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
  converting help for package 'parallelly'
    finding HTML links ... done
    as.cluster                              html  
    autoStopCluster                         html  
    availableConnections                    html  
    availableCores                          html  
    availableWorkers                        html  
    canPortBeUsed                           html  
    cpuLoad                                 html  
    find_rshcmd                             html  
    freeCores                               html  
    freePort                                html  
    getOption2                              html  
    isConnectionValid                       html  
    isForkedChild                           html  
    isForkedNode                            html  
    isLocalhostNode                         html  
    isNodeAlive                             html  
    makeClusterMPI                          html  
    makeClusterPSOCK                        html  
    parallelly.options                      html  
    pid_exists                              html  
    supportsMulticore                       html  
*** copying figures
** building package indices
** testing if installed package can be loaded from temporary location
*** arch - i386
*** arch - x64
** testing if installed package can be loaded from final location
*** arch - i386
*** arch - x64
** testing if installed package keeps a record of temporary installation path
* DONE (parallelly)
```

## [RStudio Package Manager](https://packagemanager.rstudio.com)

![](img/rspm-binaries.png)

## RSPM

![](img/rspm-binaries-zoom-highlight.png)

## how do I know I got a binary package?

::: panel-tabset

### CRAN {{< fa brands windows >}}

``` {.r code-line-numbers="5,10"}
> install.packages("parallelly", repos = "https://cran.rstudio.com")
Installing package into ‘C:/Users/edavi/Documents/R/win-library/4.1’
(as ‘lib’ is unspecified)
trying URL 'https://cran.rstudio.com/bin/windows/contrib/4.1/parallelly_1.32.1.zip'
Content type 'application/zip' length 306137 bytes (298 KB)
downloaded 298 KB

package ‘parallelly’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\edavi\AppData\Local\Temp\Rtmpa2s3e8\downloaded_packages
```

### CRAN {{< fa brands apple >}}

```{.r code-line-numbers="4,10"}
> install.packages("renv", repos="https://cran.rstudio.com")
Installing package into ‘/Users/edavidaja/Library/R/x86_64/4.1/library’
(as ‘lib’ is unspecified)
trying URL 'https://cran.rstudio.com/bin/macosx/contrib/4.1/renv_0.15.5.tgz'
Content type 'application/x-gzip' length 1866760 bytes (1.8 MB)
==================================================
downloaded 1.8 MB


The downloaded binary packages are in
 /var/folders/b5/fl4ff68d23s148tg1_1gnflc0000gn/T//RtmpMk69B0/downloaded_packages
```

### RSPM

``` {.r code-line-numbers="10"}
> install.packages("remotes")
Installing package into ‘C:/Users/WDAGUtilityAccount/AppData/Local/R/win-library/4.2’
(as ‘lib’ is unspecified)
trying URL 'https://packagemanager.rstudio.com/all/latest/bin/windows/contrib/4.2/remotes_2.4.2.zip'
Content type 'binary/octet-stream' length 399930 bytes (390 KB)
downloaded 390 KB

package ‘remotes’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
  C:\Users\WDAGUtilityAccount\AppData\Local\Temp\RtmpA1edRi\downloaded_packages
```

### renv

```{.r code-line-numbers="5"}
> renv::install("fs")
Retrieving 'https://packagemanager.rstudio.com/all/latest/bin/windows/contrib/4.2/fs_1.5.2.zip' ...
  OK [downloaded 380.9 Kb in 0.5 secs]
Installing fs [1.5.2] ...
  OK [installed binary]
Moving fs [1.5.2] into the cache ...
  OK [moved to cache in 7.4 milliseconds]
```
:::

## pop quiz, hotshot

::: question
Does RStudio Package Manager serve a binary of `dplyr` for R 3.4?
:::

```{R}
countdown_timer(minutes = 2, bottom = 0)
```

## Source

-   compiled in _your_ environment
-   requires extra tools when package uses C, C++ or Fortran

::: notes

- most common reason to install from source is when you want the development version of a package from github
One additional complication for \*nix users: 
- generally on windows can install and load packages that depend on other lower level libraries quite easily. Explain installing `sf`, for example.
:::

## if you don't have tools

``` {.r code-line-numbers="11"}
Running `R CMD build`...
* checking for file 'C:\Users\WDAGUtilityAccount\AppData\Local\Temp\RtmpkTUH61\remotes192027624804\tidyverse-dplyr-36ef054/DESCRIPTION' ... OK
* preparing 'dplyr':
* checking DESCRIPTION meta-information ... OK
* cleaning src
* installing the package to process help pages
      -----------------------------------
* installing *source* package 'dplyr' ...
** using staged installation
** libs
Warning in system(cmd) : 'make' not found
ERROR: compilation failed for package 'dplyr'
* removing 'C:/Users/WDAGUT~1/AppData/Local/Temp/Rtmp6hYuyV/Rinst1334d1a23d1/dplyr'
      -----------------------------------
ERROR: package installation failed
```

## how to get the tools

::: panel-tabset

### windows {{< fa brands windows > >}}

[Rtools](https://cran.r-project.org/bin/windows/Rtools/)

### macOS {{< fa brands apple >}}

[XCode](https://apps.apple.com/us/app/xcode/id497799835?mt=12)

:warning: don't run right now

```{.bash code-line-numbers="false"}
xcode-select --install
```

### linux {{< fa brands linux >}}

install tools via package manager, e.g.

``` bash
apt install make
```
:::

## got tools?

:::{.r .r-fit-text}
`devtools::has_devel()`
:::

> `## Your system is ready to build packages! `

## activity

::: question
install a package from r-universe
:::

::: {.small}

1. open the `personal-radmin` project
1. `install.packages("gitcellar")` # not on cran!
1. update your project `.Rprofile`:  
    `usethis::edit_r_profile(scope = "project")`

    ```{.r code-line-numbers="false"}
    options(repos = c(
      ropensci = "https://ropensci.r-universe.dev",
      CRAN = "https://cloud.r-project.org", # macOS
      RSPM = "https://packagemanager.rstudio.com/cran/latest" # windows
    ))
    ```

1. save `.Rprofile` and restart R
1. `install.packages("gitcellar")`

:::

```{R}
countdown_timer(minutes = 5, bottom = 0)
```

## discussion

- did you install `gitcellar` from binary or source?
  - How do you know?

## wrapping up

binaries are usually preferred, but for development versions of packages, you may need to install from source.

# agenda {.agenda}

-   starting R :white_check_mark:
-   installing R packages :white_check_mark:
-   reproducible environments :arrow_left:
-   installing / upgrading R

## why?

::: r-stack
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The quick and dirty approach you took then comes right back at you as a boomerang. <br><br>Therefore, ban the concept of one-off altogether. No matter what the asker says, it will have to be done again, always!<br><br>3/9</p>&mdash; Edwin Thoen (@edwin_thoen) <a href="https://twitter.com/edwin_thoen/status/1526261181631152129?ref_src=twsrc%5Etfw">May 16, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
:::

:::
You _will_ need to reproduce or update your analysis.
You might get audited!
:::

## [reproducibility strategies](https://environments.rstudio.com/reproduce)

```{r}
library(ggplot2)
library(tibble)
library(ggrepel)
mm <- tribble(
  ~x, ~y, ~label, ~Description, ~status,
  0.1, 0.1, 'Validated', 'Admins test and approve \n a subset of CRAN', TRUE,
  0.5, 0.5, 'Shared Baseline', 'All or most of CRAN, \n updated with R versions, \n tied to a system library', TRUE,
  0.5, 0.75, 'Wild West', 'Open access, \n not reproducible, \n how we learn', FALSE,
  0.8,0.8, 'Snapshot', 'Open access, user or system \n records per-project dependencies', TRUE,
  0.75, 0.2, 'Blocked', 'Backdoor package access, \n offline systems without a strategy', FALSE,
  0.2, 0.8, 'Ticket System', 'Admins involved, \n no testing, \n slow updates, \n high risk of breakage', FALSE
)
bad1 <- tribble(
  ~x, ~y, ~label, ~Description, ~status,
  0, 0.2, NA, NA, NA,
  0, 1,NA, NA, NA,
  0.8, 1, NA, NA, NA
)
bad2 <- tribble(
  ~x, ~y, ~label, ~Description, ~status,
  0.2, 0, NA, NA, NA,
  1, 0,NA, NA, NA,
  1, 0.8, NA, NA, NA
)
good <- tribble(
  ~x, ~y, ~label, ~Description, ~status,
  0, -0.2,NA, NA, NA,
  1, 0.8, NA, NA, NA,
  0.8, 1, NA, NA, NA,
  0, 0.2, NA, NA, NA
)
good2 <- tribble(
  ~x, ~y, ~label, ~Description, ~status,
  0, 0,NA, NA, NA,
  0, 0.2, NA, NA, NA,
  1, 0.8, NA, NA, NA,
  0.2, 0, NA, NA, NA
)
p <- ggplot(mm, aes(x, y)) + 
  geom_abline(slope = 1, intercept = 0.2, alpha = 0.2) + 
  geom_polygon(aes(x,y, text = Description), fill = "red", data=bad1, alpha = 0.1) + 
  geom_polygon(aes(x,y, text = Description), fill = "green", data=good, alpha = 0.1) + 
  geom_polygon(aes(x,y, text = NULL), fill = "green", data=good2, alpha = 0.1) + 
  geom_polygon(aes(x,y, text = Description), fill = "red", data=bad2, alpha = 0.1) +
  geom_abline(slope = 1, intercept = -0.2, alpha = 0.2) + 
  geom_point(aes(x, y, color = status, text = Description)) + 
  geom_text(aes(x, y, label = label), nudge_y = 0.025, nudge_x  = 0.025) + 
  scale_x_continuous(limits = c(0,1), breaks = seq(0,1,0.25), labels = c("Admins","", "", "", "Users")) +
  scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.25), labels =  c("Locked Down","", "", "", "Open")) +
  theme_minimal() + 
  scale_color_manual(breaks = NULL, values = c("#ff0000","#a3c586")) + 
  labs(
    x = "Who is Responsible for Reproducing the Environment?",
    y = "Package Access",
    color = NULL,
    title = "Reproducing Environments: Strategies and Danger Zones"
  )
p
```

## [reproducibility strategies](https://environments.rstudio.com/reproduce) {transition="none"}

```{r}
p + annotate("rect", xmin = .75, xmax = .95, ymin = .75, ymax = .95, alpha = .2)
```

::: notes
we're focused in particular on systems where we have both access and responsibility
:::

## tools

:::: columns
::: column

### rspm

::: r-stack
![](img/icon-rspm.png){.r-stretch}
:::

:::

::: column

### renv

::: r-stack
![](img/renv-small.png){.r-stretch}
:::

:::
::::

::: notes
renv has a number of tools that are helpful for adopting a project-based workflow: 
- lockfile records what packages you use and where you instaled them from 
- `renv::install()` can handle installation from remote sources, local sources, package versions, bioconductor, rspm 
- per-project library isolation with global package cache 
  -makes it easy to install experimental versions of packages and then roll back to a stable release if it doesn't work out
:::

## rspm

::: r-stack
![](img/icon-rspm.png){.r-stretch}
:::

## rspm: latest

![](img/rspm-latest.png)

## rspm: date-based snapshots

![](img/rspm-2021-03-31-highlight.png)

## activity

::: question
time travel!
:::

1. open the `personal-radmin` project
1. update your project `.Rprofile` with a date-based snapshot of CRAN

    ```{.r code-line-numbers="false"}
    options(repos = c(RSPM = "https://packagemanager.rstudio.com/cran/2021-03-31"))
    ```
1. Restart R
1. `install.packages("dplyr")`  

what version of dplyr did you install?

```{R}
countdown_timer(minutes = 5, bottom = 0)
```

## renv

::: r-stack
![](img/renv-small.png){.r-stretch}
:::

## shared project environment

::: {data-id="env"}
```{mermaid}
%%{init: {"theme": "dark" } }%%
graph
L --- P1
L --- P2
L --- P3
L(library)
P1(project1)
P2(project2)
P3(project3)
```
:::

::: notes
- by default all of your packages are installed into your user library
- the unforunate default behavior in macOS is also that this is the system library
- updating a package in the shared environments updates it for _all_ of your projects
:::

<br/>

### `.libPaths()`

```{.r code-line-numbers="false"}
[1] "C:/Users/edavi/Documents/R/win-library/3.6" # user
[2] "C:/Program Files/R/R-3.6.3/library" # system
```

## isolated project environments

::: {data-id="env"}
```{mermaid}
%%{init: {"theme": "dark" } }%%
graph
C --- L1
C --- L2
C --- L3
L1 --- P1
L2 --- P2
L3 --- P3
L1(library1)
L2(library2)
L3(library3)
P1(project1)
P2(project2)
P3(project3)
C(global cache)
```
:::

<br/>

### `.libPaths()`

```{.r code-line-numbers="false"}
* Project '~/projects/sample-project' loaded. [renv 0.15.5]
> .libPaths()
[1] "C:/Users/edavi/Documents/projects/sample-project/renv/library/R-3.6/x86_64-w64-mingw32"
[2] "C:/Program Files/R/R-3.6.3/library"
```

## isolated project environments

- experiment with new packages without breaking other projects
- share exactly which versions you're using with your team or future you
- re-use packages you've already installed


## activity

::: question
create an isolated project library
:::

::: small
1. open your `wtf-fix-paths` project
1. `install.packages("renv")`
1. `renv::init()`
1. `renv::status()`
1. add `library(parallelly)` to any file in the `wtf-fix-paths/R` directory; save file
1. `renv::status()`
1. `install.packages("parallelly")`
1. `renv::status()`
1. `renv::snapshot()` (`y` proceed)
1. remove `library(parallelly)` from the file you added it to; save file
1. `renv::status()`
:::


```{R}
countdown_timer(minutes = 10, bottom = 0)
```

::: {.notes}
run `.libPaths()` to see what your default package libraries are
initialize an renv--you'll see that the environment is now local to the project
note the .Rprofile that gets placed into your project, which runs an R script in `renv/activate.R`
deactivate the environment and check libPaths() again--it should be back to normal
:::


## `renv.lock` {visibility="hidden"}

``` json
{
  "R": {
    "Version": "4.1.2",
    "Repositories": [
      {
        "Name": "CRAN",
        "URL": "https://cloud.r-project.org"
      }
    ]
  },
  "Packages": {
    [...]
    "knitr": {
      "Package": "knitr",
      "Version": "1.39",
      "Source": "Repository",
      "Repository": "CRAN",
      "Hash": "029ab7c4badd3cf8af69016b2ba27493",
      "Requirements": [
        "evaluate",
        "highr",
        "stringr",
        "xfun",
        "yaml"
      ]
    },
    ...
  }
}
```

::: notes
created from `renv::snapshot()` by default, identifies dependencies of your code for example: usethis doesn't usually appear in my lockfiles, because I'm running it interactively, rather than making it a dependency of my projects
:::

## `renv::install()`

or [`install.packages()`](https://rstudio.github.io/renv/articles/renv.html#shims) with shims enabled

``` r
renv::install("jsonlite")
renv::install("jsonlite@1.2") # at version
renv::install"jeroen/jsonlite") # latest
renv::install"jeroen/jsonlite@80854359976250f30a86a6992c0d8c3b3d95473d") # at SHA
renv::install("path/to/package") # local source
```

<hr>

::: fragment
``` r
devtools::install("jsonlite")
devtools::install_version("jsonlite@1.2") # at version
devtools::install_github("jeroen/jsonlite") # latest
devtools::install_github("jeroen/jsonlite@80854359976250f30a86a6992c0d8c3b3d95473d") # at SHA
devtools::install("path/to/package") # local source
```
:::

## the junk drawer

for reprexes, tweets, and other ephemera:

`~/Documents/scratch`

::: notes
I use `renv` for everything, and have one junk project into which I install things without regard for stability or reproducibility
:::

## sysdeps??


# agenda {.agenda}

-   starting R :white_check_mark:
-   installing R packages :white_check_mark:
-   reproducible environments :white_check_mark:
-   installing / upgrading R :arrow_left:

## why

::: r-stack
![](img/project-oyster-greyed.svg){.r-stretch}
:::

## why

::: r-stack
![](img/project-oyster.svg)
:::

## bigger context

::: r-stack
![](img/r-project-oyster.svg)
:::

## practice makes perfect

::: panel-tabset
### Windows 10+

[Windows Sandbox](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-sandbox/windows-sandbox-overview)

### macOS

:shrug:

### Linux

[Multipass](https://multipass.run/)\
[Digital Ocean](https://www.digitalocean.com/)\
[Linode](https://www.linode.com/)
:::

::: notes
The best way to become more comfortable with installing things is to practice in an environment you can throw away  
- the windows sandbox lets you test in an environment on your machine that won't affect your computer 
- enabling it is outside the scope of this course 
- for linux users, the easiest thing to do is stand up a small VPS 
- I don't know of a good safe way to test mac environments
:::

## "run this command" >> clickOps

![](img/installing-R.png)

## package managers

software whose job it is to install other software  
:hear_no_evil: not the same kinds of _packages_ as RSPM

|                                   | package manager               |
|---------------------------------- |-------------------------------|
| {{< fa brands windows >}} windows | [scoop](https://scoop.sh/), chocolatey, winget |
| {{< fa brands apple >}} macOS     | [homebrew](https://brew.sh/)                  |
| {{< fa brands linux >}} linux     | [homebrew](https://brew.sh/), apt, yum, zypper|

## :warning:

Avoid installing your language with a package manager

::: notes
You want to avoid having the language version your projects are using changed out from you unexpectedly
Tools for freezing installations with your package manager are not consistently effective
Other software that you install with your package manager may expect that package manager to be running the latest
Idiosyncracies of your language will be better understood by a dedicated tool
:::

## language managers

using your package manager, install a language manager

::: panel-tabset
### windows


```{.bash code-line-numbers="false"}
scoop install rig
```

### \*nix

``` {.bash code-line-numbers="false"}
brew install rig
```
:::

::: small
language managers for other languages:

{{< fa brands python >}} pyenv  
{{< fa brands node-js >}} nvm  
{{< fa brands rust >}} rustup  
:::

::: notes
-   many language managers are often written in some language other than the one they are responsible for managing
:::

## switching R versions {{< fa brands windows >}}

### `CTRL +  CLICK`

::: r-stack
![](img/ctrl_click.png)
:::

## switching R versions {{< fa brands windows >}}

::: r-stack
![](img/r_version_select_windows-highlight.png)
:::

## switching R versions {{< fa brands apple >}}

::: r-fit-text
[RSwitch](https://rud.is/rswitch/)
:::

## language versions

using your language manager, install a language version:

``` shell
❯ rig install --help
rig-add

DESCRIPTION:
    Download and install an R version, from the official sources.
    It keeps the already installed R versions, except versions within the
    same minor branch, see below.

EXAMPLES:
    # Add the latest release
    rig add release

    # Install specific version
    rig add 4.1.2

    # Install latest version within a minor branch
    rig add 4.1
```

::: notes
if you're running a distribution of linux that rig doesn't support: - https://docs.rstudio.com/resources/install-r/

if no pre-compiled binary of rig is available: - https://docs.rstudio.com/resources/install-r-source/
:::

## environment managers

using your desired version of the language, install an environment manager:

::: {.r .r-fit-text}
`install.packages("renv")`
:::

## project

using your environment manager, install your project's dependencies:

-   create a new environment

    ``` r
    renv::init()
    ```

-   restore an already defined environment

    ``` r
    renv::restore()
    ```

## activity

::: panel-tabset

### relaxed

read the [rig FAQ](https://github.com/r-lib/rig#-faq), or the [rswitch guide](https://rud.is/rswitch/guide/)

### spartan

- install `rig`  
-  use rig to install a different **major** or **minor** version of R  
:warning: avoid installing a _patch_ version  
-  open RStudio with that newly installed R version  

:::

```{r}
countdown(minutes = 10)
```

## rig + renv

1.  snapshot the project library with `renv`
2.  install a new version of R
3.  restore the project library in the new R version
