[
  {
    "objectID": "index.html#section",
    "href": "index.html#section",
    "title": "",
    "section": "",
    "text": "rstd.io/wtf-2022-rsc"
  },
  {
    "objectID": "index.html#a-brief-personal-history",
    "href": "index.html#a-brief-personal-history",
    "title": "",
    "section": "a brief personal history:",
    "text": "a brief personal history:\n\n\n\nAuditor\n\n\npersonal laptop \nRStudio in Citrix \nairgapped RStudio Server Pro \nairgapped Shiny Server Pro \nSpecial Issue Individual Laptop  \nSpecial Issue Individual Desktop \nSpecial Issue Team Desktop \n\n\n\n\nData Scientist\n\n\npersonal laptop \nwork laptop \nRStudio in Citrix \nRStudio Server \n\n\n\n\nSolutions Engineer\n\n\npersonal laptop \nWork laptop \nRStudio Workbench Demo Server \nRStudio Workbench Internal Server \n\n\n\n\n\nthis is intended to provide context on my priorities / habits of thought: - it needs to work across operating systems - You can‚Äôt depend on having pro features - avoid admin where possible - as portable as practical - audit context means I need to be able to reproduce exactly - ‚Äúrun this command‚Äù preferable to a confluence page of screenshots"
  },
  {
    "objectID": "index.html#how-do-i",
    "href": "index.html#how-do-i",
    "title": "",
    "section": "How do I‚Ä¶",
    "text": "How do I‚Ä¶\n\n\nupgrade the version of R I‚Äôm using for this project?\nknow which package versions I‚Äôm using for this project?\nmove this project from one machine to another?\n\n\n\nWe‚Äôre extending the lessons from Day 1 to think about what it means to work with R projects over time. That means that in addition to wanting our individual projects to flow smoothly, we also want to strategize about how to manage different versions of the language, different package versions, and different execution contexts. Working on an old project on a new computer is a lot like trying to put an app into production."
  },
  {
    "objectID": "index.html#focus-areas",
    "href": "index.html#focus-areas",
    "title": "",
    "section": "focus areas",
    "text": "focus areas\n\ninstalling R\nstarting R\ninstalling R packages\nupgrading R"
  },
  {
    "objectID": "index.html#practice-makes-perfect",
    "href": "index.html#practice-makes-perfect",
    "title": "",
    "section": "practice makes perfect",
    "text": "practice makes perfect\n\nWindows 10+macOSLinux\n\n\nWindows Sandbox\n\n\nü§∑\n\n\nMultipass\nDigital Ocean\nLinode\n\n\n\n\nThe best way to become more comfortable with installing things is to practice in an environment you can throw away - the windows sandbox lets you test in an environment on your machine that won‚Äôt affect your computer - enabling it is outside the scope of this course - for linux users, the easiest thing to do is stand up a small VPS - I don‚Äôt know of a good safe way to test mac environments"
  },
  {
    "objectID": "index.html#software-managers",
    "href": "index.html#software-managers",
    "title": "",
    "section": "‚Äúsoftware managers‚Äù",
    "text": "‚Äúsoftware managers‚Äù\npackage managers\nsoftware whose job it is to install other software\nwindows: scoop, chocolatey, winget\nmacOS: homebrew\nlinux: homebrew, apt, yum, zypper"
  },
  {
    "objectID": "index.html#section-1",
    "href": "index.html#section-1",
    "title": "",
    "section": "‚ö†Ô∏è",
    "text": "‚ö†Ô∏è\nAvoid installing your language with a package manager\n\nYou want to avoid having the language version your projects are using changed out from you unexpectedly Tools for freezing installations with your package manager are not consistently effective Other software that you install with your package manager may expect that package manager to be running the latest Idiosyncracies of your language will be better understood by a dedicated tool"
  },
  {
    "objectID": "index.html#clickops",
    "href": "index.html#clickops",
    "title": "",
    "section": "clickOps",
    "text": "clickOps"
  },
  {
    "objectID": "index.html#rig",
    "href": "index.html#rig",
    "title": "",
    "section": "rig",
    "text": "rig\nhttps://github.com/r-lib/rig/"
  },
  {
    "objectID": "index.html#language-managers",
    "href": "index.html#language-managers",
    "title": "",
    "section": "language managers",
    "text": "language managers\nusing your package manager, install a language manager\n\nwindows*nix\n\n\nscoop install rig\n\n\nbrew install rig\n\n\n\n pyenv\nnvm\n\n\n\nmany language managers are often written in some language other than the one they are responsible for managing"
  },
  {
    "objectID": "index.html#language-versions",
    "href": "index.html#language-versions",
    "title": "",
    "section": "language versions",
    "text": "language versions\nusing your language manager, install a language version:\n‚ùØ rig install --help\nrig-add\n\nDESCRIPTION:\n    Download and install an R version, from the official sources.\n    It keeps the already installed R versions, except versions within the\n    same minor branch, see below.\n\nEXAMPLES:\n    # Add the latest release\n    rig add release\n\n    # Install specific version\n    rig add 4.1.2\n\n    # Install latest version within a minor branch\n    rig add 4.1\n\n\nif you‚Äôre running a distribution of linux that rig doesn‚Äôt support: - https://docs.rstudio.com/resources/install-r/\nif no pre-compiled binary of rig is available: - https://docs.rstudio.com/resources/install-r-source/"
  },
  {
    "objectID": "index.html#environment-managers",
    "href": "index.html#environment-managers",
    "title": "",
    "section": "environment managers",
    "text": "environment managers\nusing your desired version of the language, install an environment manager:\n\ninstall.packages(\"renv\")"
  },
  {
    "objectID": "index.html#project",
    "href": "index.html#project",
    "title": "",
    "section": "project",
    "text": "project\nusing your environment manager, install your project‚Äôs dependencies:\n\n\nnew\nrenv::init()\n\nexisting\nrenv::restore()"
  },
  {
    "objectID": "index.html#activity",
    "href": "index.html#activity",
    "title": "",
    "section": "activity",
    "text": "activity\n\n\nread the rig FAQ, or the rswitch guide\ninstall a different major/minor version of R\n\nhttps://cran.r-project.org/bin/macosx/\nhttps://cran.r-project.org/bin/windows/base/old/\n\ninstall rig\n\nuse rig to install a different major or minor version of R\nopen RStudio with that newly installed R version\n\n\n\n\n\n\n01:00"
  },
  {
    "objectID": "index.html#renviron-and-.rprofile",
    "href": "index.html#renviron-and-.rprofile",
    "title": "",
    "section": ".Renviron and .Rprofile",
    "text": ".Renviron and .Rprofile\nusethis::edit_r_profile()"
  },
  {
    "objectID": "index.html#r-startup-sequence-detail",
    "href": "index.html#r-startup-sequence-detail",
    "title": "",
    "section": "R startup sequence (detail)",
    "text": "R startup sequence (detail)\n\n\nScopes: - system: (usually suffixed by .site, per version of R) - user - project\nuser scoped .Rprofile and .Renviron content is applied last"
  },
  {
    "objectID": "index.html#remember-to-use-a-newline",
    "href": "index.html#remember-to-use-a-newline",
    "title": "",
    "section": "‚ö†Ô∏è Remember to use a newline",
    "text": "‚ö†Ô∏è Remember to use a newline\n\n\n.Renviron and .Rprofile must end in a newline.\n\n\n\n\n\nR will silently throw away the last line if you don‚Äôt do this"
  },
  {
    "objectID": "index.html#renviron",
    "href": "index.html#renviron",
    "title": "",
    "section": ".Renviron",
    "text": ".Renviron\n‚úÖ R-specific environment variables\n‚úÖ API keys\n‚ùå R code"
  },
  {
    "objectID": "index.html#example-.renviron",
    "href": "index.html#example-.renviron",
    "title": "",
    "section": "example .Renviron",
    "text": "example .Renviron\n\nproject short circuits home?\n\nR_HISTSIZE=100000\nGITHUB_PAT=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\nCONNECT_API_KEY=DaYK2hBUriSBYUEGIAiyXsRJHSjTYJN3\nRETICULATE_PYTHON=.venv/bin/python\n\naccessing things once they‚Äôre in the R environ\n\nSys.getenv()\n\nthe keys have already been burned, don‚Äôt worry"
  },
  {
    "objectID": "index.html#rprofile",
    "href": "index.html#rprofile",
    "title": "",
    "section": ".Rprofile",
    "text": ".Rprofile\ninteractive helpers that run in every session"
  },
  {
    "objectID": "index.html#what-to-put-in-.rprofile",
    "href": "index.html#what-to-put-in-.rprofile",
    "title": "",
    "section": "what to put in .Rprofile",
    "text": "what to put in .Rprofile\n\nSet a default CRAN mirror\nWrite a welcome message\nCustomize R prompt\nSelectively change (but be careful)\n\nOptions, screen width, numeric display\nLoad frequently used interactive packages\nAliases / shortcuts for frequently used functions\n\nyou don‚Äôt typically share rprofiles\n\n\nrlrang::entrace so base errors get better context?"
  },
  {
    "objectID": "index.html#why-shouldnt-these-go-in-.rprofile",
    "href": "index.html#why-shouldnt-these-go-in-.rprofile",
    "title": "",
    "section": "why shouldn‚Äôt these go in .Rprofile?",
    "text": "why shouldn‚Äôt these go in .Rprofile?\n\n\noptions(stringsAsFactors = FALSE)\nlibrary(tidyverse)\nlibrary(ggplot2)\nf <- dplyr::filter\ntheme_set(theme_bw())"
  },
  {
    "objectID": "index.html#dev-dependencies",
    "href": "index.html#dev-dependencies",
    "title": "",
    "section": "dev dependencies",
    "text": "dev dependencies\nIf something appears in a script, it should not be in .Rprofile"
  },
  {
    "objectID": "index.html#activity-1",
    "href": "index.html#activity-1",
    "title": "",
    "section": "activity",
    "text": "activity\n\nwhy can these go in .Rprofile?\n\nlibrary(usethis)\nlibrary(devtools)\n\n\n\n01:00"
  },
  {
    "objectID": "index.html#andries-rprofile",
    "href": "index.html#andries-rprofile",
    "title": "",
    "section": "andrie‚Äôs Rprofile",
    "text": "andrie‚Äôs Rprofile"
  },
  {
    "objectID": "index.html#renviron-vs-rprofile",
    "href": "index.html#renviron-vs-rprofile",
    "title": "",
    "section": "renviron vs rprofile",
    "text": "renviron vs rprofile"
  },
  {
    "objectID": "index.html#activity-2",
    "href": "index.html#activity-2",
    "title": "",
    "section": "activity",
    "text": "activity\nfind rprofiles on github and add something to yours"
  },
  {
    "objectID": "index.html#types-of-r-packages",
    "href": "index.html#types-of-r-packages",
    "title": "",
    "section": "Types of R packages",
    "text": "Types of R packages\n\nBinary\nSource"
  },
  {
    "objectID": "index.html#binary",
    "href": "index.html#binary",
    "title": "",
    "section": "Binary",
    "text": "Binary\n\ncompiled ahead of time\nonly R is needed to install"
  },
  {
    "objectID": "index.html#where-to-get-binaries",
    "href": "index.html#where-to-get-binaries",
    "title": "",
    "section": "where to get binaries",
    "text": "where to get binaries\n\n\n\nos\ncran\nppm\n\n\n\n\n\n‚úÖ\n‚úÖ\n\n\n\n‚úÖ\n‚ùå\n\n\n\n‚ùå\n‚úÖ"
  },
  {
    "objectID": "index.html#source",
    "href": "index.html#source",
    "title": "",
    "section": "Source",
    "text": "Source\n\ncompiled in development environment\nrequires extra tools when package uses C, C++, Fortran\n\n\nOne additional complication for *nix users: generally on windows can install and load packages that depend on other lower level libraries quite easily. Explain installing sf, for example."
  },
  {
    "objectID": "index.html#if-you-dont-have-tools",
    "href": "index.html#if-you-dont-have-tools",
    "title": "",
    "section": "if you don‚Äôt have tools",
    "text": "if you don‚Äôt have tools\nRunning `R CMD build`...\n* checking for file 'C:\\Users\\WDAGUtilityAccount\\AppData\\Local\\Temp\\RtmpkTUH61\\remotes192027624804\\tidyverse-dplyr-36ef054/DESCRIPTION' ... OK\n* preparing 'dplyr':\n* checking DESCRIPTION meta-information ... OK\n* cleaning src\n* installing the package to process help pages\n      -----------------------------------\n* installing *source* package 'dplyr' ...\n** using staged installation\n** libs\nWarning in system(cmd) : 'make' not found\nERROR: compilation failed for package 'dplyr'\n* removing 'C:/Users/WDAGUT~1/AppData/Local/Temp/Rtmp6hYuyV/Rinst1334d1a23d1/dplyr'\n      -----------------------------------\nERROR: package installation failed"
  },
  {
    "objectID": "index.html#get-the-tools",
    "href": "index.html#get-the-tools",
    "title": "",
    "section": "get the tools",
    "text": "get the tools\n\nwindowsmacOSLinux\n\n\nRtools\nrig add rtools\n\n\nXCode\nxcode-select --install\nor download from the Mac App Store\n\n\ninstall tools via ‚Äúsoftware manager‚Äù"
  },
  {
    "objectID": "index.html#got-tools",
    "href": "index.html#got-tools",
    "title": "",
    "section": "got tools?",
    "text": "got tools?\n> devtools::has_devel()\nYour system is ready to build packages!"
  },
  {
    "objectID": "index.html#activity-3",
    "href": "index.html#activity-3",
    "title": "",
    "section": "activity",
    "text": "activity\n\ninstall a package from source\n\ninstall.packages(\"jsonlite\", type = \"source\")"
  },
  {
    "objectID": "index.html#environments.rstudio.com",
    "href": "index.html#environments.rstudio.com",
    "title": "",
    "section": "environments.rstudio.com",
    "text": "environments.rstudio.com"
  },
  {
    "objectID": "index.html#spectrum",
    "href": "index.html#spectrum",
    "title": "",
    "section": "spectrum",
    "text": "spectrum"
  },
  {
    "objectID": "index.html#renv",
    "href": "index.html#renv",
    "title": "",
    "section": "renv",
    "text": "renv\n\n\nrenv has a number of tools that are helpful for adopting a project-based workflow: - lockfile records what packages you use and where you instaled them from - renv::install() can handle installation from remote sources, local sources, package versions, bioconductor, rspm - per-project library isolation with global package cache makes it easy to install experimental versions of packages and then roll back to a stable release if it doesn‚Äôt work out"
  },
  {
    "objectID": "index.html#renvinit",
    "href": "index.html#renvinit",
    "title": "",
    "section": "renv::init()",
    "text": "renv::init()\n.libPaths()\nrenv::init()\n.libPaths()\nrenv::deactivate()\n.libPaths()\n\nrun .libPaths() to see what your default package libraries are initialize an renv‚Äìyou‚Äôll see that the environment is now local to the project note the .Rprofile that gets placed into your project, which runs an R script in renv/activate.R deactivate the environment and check libPaths() again‚Äìit should be back to normal"
  },
  {
    "objectID": "index.html#renv.lock",
    "href": "index.html#renv.lock",
    "title": "",
    "section": "renv.lock",
    "text": "renv.lock\n{\n  \"R\": {\n    \"Version\": \"4.1.2\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://cloud.r-project.org\"\n      }\n    ]\n  },\n  \"Packages\": {\n    [...]\n    \"knitr\": {\n      \"Package\": \"knitr\",\n      \"Version\": \"1.39\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"029ab7c4badd3cf8af69016b2ba27493\",\n      \"Requirements\": [\n        \"evaluate\",\n        \"highr\",\n        \"stringr\",\n        \"xfun\",\n        \"yaml\"\n      ]\n    },\n    ...\n  }\n}\n\ncreated from renv::snapshot() by default, identifies dependencies of your code for example: usethis doesn‚Äôt usually appear in my lockfiles, because I‚Äôm running it interactively, rather than making it a dependency of my projects"
  },
  {
    "objectID": "index.html#renvinstall",
    "href": "index.html#renvinstall",
    "title": "",
    "section": "renv::install()",
    "text": "renv::install()\nor install.packages() with shims enabled\nrenv::install(\"jsonlite\")\nrenv::install(\"jsonlite@1.2\") # at version\nrenv::install(\"jeroen/jsonlite\") # latest\nrenv::install(\"jeroen/jsonlite@80854359976250f30a86a6992c0d8c3b3d95473d\") # at SHA\nrenv::install(\"path/to/package\") # local source\n\n\ndevtools::install()\ndevtools::install_version()\ndevtools::install_github()\ndevtools::install_github()\ndevtools::install(\"path/to/package\")"
  },
  {
    "objectID": "index.html#the-junk-drawer",
    "href": "index.html#the-junk-drawer",
    "title": "",
    "section": "the junk drawer",
    "text": "the junk drawer\nfor reprexes, tweets, and other ephemera:\n~/Documents/scratch\n\nI use renv for everything, and have one junk project into which I install things without regard for stability or reproducibililty"
  },
  {
    "objectID": "index.html#rig-1",
    "href": "index.html#rig-1",
    "title": "",
    "section": "rig",
    "text": "rig\nlaunch rstudio from an renv lockfile:\nrig rstudio path/to/renv.lock"
  },
  {
    "objectID": "index.html#activity-4",
    "href": "index.html#activity-4",
    "title": "",
    "section": "activity",
    "text": "activity\n\ninstall dev jsonlite, then roll back to released version"
  },
  {
    "objectID": "index.html#rig-renv",
    "href": "index.html#rig-renv",
    "title": "",
    "section": "rig + renv",
    "text": "rig + renv\n\nsnapshot the project library with renv\ninstall a new version of R\nrestore the project library in the new R version\n\n\n\n\nPersonal R Administration"
  }
]