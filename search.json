[
  {
    "objectID": "index.html#course-material",
    "href": "index.html#course-material",
    "title": "",
    "section": "Course material",
    "text": "Course material\n\nrstd.io/wtf-2022-rsc"
  },
  {
    "objectID": "index.html#a-brief-personal-history",
    "href": "index.html#a-brief-personal-history",
    "title": "",
    "section": "a brief personal history:",
    "text": "a brief personal history:\n\n\n\nAuditor\n\n\npersonal laptop \nRStudio in Citrix \nairgapped RStudio Workbench \nairgapped Shiny Server Pro \nSpecial Issue Individual Laptop  \nSpecial Issue Individual Desktop \nSpecial Issue Team Desktop \n\n\n\n\nData Scientist\n\n\npersonal laptop \nwork laptop \nRStudio in Citrix \nRStudio Server \n\n\n\n\nSolutions Engineer\n\n\npersonal laptop \nWork laptop \nRStudio Workbench Demo Server \nRStudio Workbench Internal Server \n\n\n\n\n\nthis is intended to provide context on my priorities / habits of thought: - it needs to work across operating systems - You can‚Äôt depend on having pro features - avoid admin where possible - as portable as practical - audit context means I need to be able to reproduce exactly - ‚Äúrun this command‚Äù preferable to a confluence page of screenshots"
  },
  {
    "objectID": "index.html#how-do-i",
    "href": "index.html#how-do-i",
    "title": "",
    "section": "How do I‚Ä¶",
    "text": "How do I‚Ä¶\n\n\nupgrade the version of R I‚Äôm using for this project?\nknow which package versions I‚Äôm using for this project?\nmove this project from one machine to another?\n\n\n\nWe‚Äôre extending the lessons from Day 1 to think about what it means to work with R projects over time. That means that in addition to wanting our individual projects to flow smoothly, we also want to strategize about how to manage different versions of the language, different package versions, and different execution contexts. Working on an old project on a new computer is a lot like trying to put an app into production."
  },
  {
    "objectID": "index.html#focus-areas",
    "href": "index.html#focus-areas",
    "title": "",
    "section": "focus areas",
    "text": "focus areas\n\n\nstarting R\ninstalling R packages\nreproducible environments\ninstalling / upgrading R"
  },
  {
    "objectID": "index.html#why",
    "href": "index.html#why",
    "title": "",
    "section": "why?",
    "text": "why?\nSometimes we want to change the way our code behaves without having to change the code."
  },
  {
    "objectID": "index.html#r-startup-sequence",
    "href": "index.html#r-startup-sequence",
    "title": "",
    "section": "R startup sequence",
    "text": "R startup sequence"
  },
  {
    "objectID": "index.html#r-startup-sequence-our-focus",
    "href": "index.html#r-startup-sequence-our-focus",
    "title": "",
    "section": "R startup sequence (our focus)",
    "text": "R startup sequence (our focus)"
  },
  {
    "objectID": "index.html#use-a-newline",
    "href": "index.html#use-a-newline",
    "title": "",
    "section": "‚ö†Ô∏è Use a newline",
    "text": "‚ö†Ô∏è Use a newline\n\n\n.Renviron and .Rprofile must end in a newline.  \nR may silently throw away the last line if you don‚Äôt do this"
  },
  {
    "objectID": "index.html#editing-.renviron",
    "href": "index.html#editing-.renviron",
    "title": "",
    "section": "Editing .Renviron",
    "text": "Editing .Renviron\n\nusethis::edit_r_environ(scope = ?)\n\n\n\nuser\n~/.Renviron\n\nproject\npath/to/your/project/.Renviron"
  },
  {
    "objectID": "index.html#renviron",
    "href": "index.html#renviron",
    "title": "",
    "section": ".Renviron",
    "text": ".Renviron\n‚úÖ R-specific environment variables\n‚úÖ API keys\n‚ùå R code"
  },
  {
    "objectID": "index.html#example-.renviron",
    "href": "index.html#example-.renviron",
    "title": "",
    "section": "example .Renviron",
    "text": "example .Renviron\nuser\nPATH=\"${RTOOLS40_HOME}\\usr\\bin;${PATH}\" # windows users\nGITHUB_PAT=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\nCONNECT_API_KEY=DaYK2hBUriSBYUEGIAiyXsRJHSjTYJN3\nR_HISTSIZE=100000\n\nproject\nRETICULATE_PYTHON=.venv/bin/python\nDB_USER=elephant\nDB_PASS=p0stgr3s\nuser and project scopes are additive\nif values clash, project wins"
  },
  {
    "objectID": "index.html#read-environment-variables",
    "href": "index.html#read-environment-variables",
    "title": "",
    "section": "read environment variables",
    "text": "read environment variables\n\nSys.getenv()"
  },
  {
    "objectID": "index.html#activity",
    "href": "index.html#activity",
    "title": "",
    "section": "activity",
    "text": "activity\n\nedit your user .Renvironedit your project .Renvironhandle a collision\n\n\n\nusethis::edit_r_environ()\nadd WTF_USER=<your name>\nrestart your R session\nCTRL + SHIFT + F10\nCMD  + SHIFT + 0\nRetrieve the value of WTF_USER Sys.getenv(‚ÄúWTF_USER‚Äù)\n\n\n\n\nusethis::edit_r_environ(\"project\")\nadd WTF_PROJECT=<your name>\nrestart your R session\nCTRL + SHIFT + F10\nCMD  + SHIFT + 0\nRetrieve the value of WTF_USER Sys.getenv(‚ÄúWTF_PROJECT‚Äù)\n\n\n\n\nusethis::edit_r_environ()\nadd WTF_DAVID=user\nusethis::edit_r_environ(\"project\")\nadd WTF_DAVID=project\nrestart your R session\nretrieve the value of WTF_DAVID\n\n\n\n\n\n\n\n10:00"
  },
  {
    "objectID": "index.html#rprofile",
    "href": "index.html#rprofile",
    "title": "",
    "section": ".Rprofile",
    "text": ".Rprofile\nR code that runs at the start of each session"
  },
  {
    "objectID": "index.html#interactive",
    "href": "index.html#interactive",
    "title": "",
    "section": "?interactive()",
    "text": "?interactive()\n\n\nTRUE\nüßë‚Äçüíª \n\nsending individual lines of code to the console\n\n \n\n‚òùÔ∏è most .Rprofile customization\n\n\nFALSE\nü§ñ \n\nknitting an RMarkdown document\n\nR -e script.R"
  },
  {
    "objectID": "index.html#what-to-put-in-.rprofile",
    "href": "index.html#what-to-put-in-.rprofile",
    "title": "",
    "section": "what to put in .Rprofile",
    "text": "what to put in .Rprofile\n\nset a default CRAN mirror\ncustomize R prompt\nselectively change (but be careful)\n\noptions, screen width, numeric display\nload frequently used interactive packages\naliases / shortcuts for frequently used functions"
  },
  {
    "objectID": "index.html#why-shouldnt-these-go-in-.rprofile",
    "href": "index.html#why-shouldnt-these-go-in-.rprofile",
    "title": "",
    "section": "why shouldn‚Äôt these go in .Rprofile?",
    "text": "why shouldn‚Äôt these go in .Rprofile?\n\n\noptions(stringsAsFactors = FALSE)\nlibrary(tidyverse)\nf <- dplyr::filter\ntheme_set(theme_bw())"
  },
  {
    "objectID": "index.html#dev-dependencies",
    "href": "index.html#dev-dependencies",
    "title": "",
    "section": "dev dependencies",
    "text": "dev dependencies\nIf it matters for code you share, it should not be in .Rprofile"
  },
  {
    "objectID": "index.html#discuss-with-your-neighbor",
    "href": "index.html#discuss-with-your-neighbor",
    "title": "",
    "section": "discuss with your neighbor",
    "text": "discuss with your neighbor\n\nWhy might these be safe to put in .Rprofile?\n\n\nlibrary(usethis)\nlibrary(devtools)\n\n\n\n02:00"
  },
  {
    "objectID": "index.html#andries-.rprofile",
    "href": "index.html#andries-.rprofile",
    "title": "",
    "section": "andrie‚Äôs .Rprofile",
    "text": "andrie‚Äôs .Rprofile\n# Set CRAN mirror\nif (R.version$status == \"Under development (unstable)\") {\n  options(repos = c(CRAN = \"https://cloud.r-project.org/\"))\n} else {\n  options(repos = c(CRAN = \"https://packagemanager.rstudio.com/all/latest\"))\n}\n\n# Set the executable for GhostScript\nif (.Platform$OS.type == \"windows\") {\n  Sys.setenv(R_GSCMD = Sys.which(\"gswin64c\"))\n}"
  },
  {
    "objectID": "index.html#activity-1",
    "href": "index.html#activity-1",
    "title": "",
    "section": "activity",
    "text": "activity\n\nedit your user .Rprofileedit your project .Rprofile\n\n\n\nusethis::edit_r_profile()\nadd print(\"from my user Rprofile\")\nrestart your R session\nCTRL + SHIFT + F10\nCMD  + SHIFT + 0\nwhat value is printed when you restart?\n\n\n\n\nusethis::edit_r_profile(\"project\")\nadd print(\"from my project Rprofile\")\nrestart your R session\nCTRL + SHIFT + F10\nCMD  + SHIFT + 0\nwhat value is printed when you restart?\n\n\n\n\n\n\n\n05:00\n\n\n\n\nproject .Rprofile ‚Äúshort-circuits‚Äù\nif it exists, your user .Rprofile will not be evaluated"
  },
  {
    "objectID": "index.html#wrapping-up",
    "href": "index.html#wrapping-up",
    "title": "",
    "section": "wrapping up",
    "text": "wrapping up\n\n\n.Renviron\n\nsecrets\nenvironment information\n\n\n.Rprofile\n\ndevelopment dependencies"
  },
  {
    "objectID": "index.html#why-1",
    "href": "index.html#why-1",
    "title": "",
    "section": "why",
    "text": "why\n\n\nhaving a reason to slack off is fun but being able to get your work done quickly is more fun"
  },
  {
    "objectID": "index.html#states-of-r-packages",
    "href": "index.html#states-of-r-packages",
    "title": "",
    "section": "states of R packages",
    "text": "states of R packages\n\n\n\n\nstateDiagram-v2\nstate theWholeGame {\n[*] --> Source\nSource --> Bundled: devtools#58;#58;build()\nBundled --> Binary: devtools#58;#58;build(binary = TRUE)\nBinary --> Installed: install.packages()\nInstalled --> Loaded: library()\nLoaded --> [*]\n}"
  },
  {
    "objectID": "index.html#states-of-r-packages-1",
    "href": "index.html#states-of-r-packages-1",
    "title": "",
    "section": "states of R packages",
    "text": "states of R packages\n\n\n\n\nstateDiagram-v2\ndirection LR\n[*] --> Dev\nDev --> Use\nstate Dev {\n  [*] --> Source\n  Source --> Bundled: devtools#58;#58;build()\n  Bundled --> Binary: devtools#58;#58;build(binary = TRUE)\n}\nstate Use {\n  binary --> Installed: install.packages()\n  Installed --> Loaded: library()\n  Loaded --> [*]\n}"
  },
  {
    "objectID": "index.html#r-pkgs.org",
    "href": "index.html#r-pkgs.org",
    "title": "",
    "section": "r-pkgs.org",
    "text": "r-pkgs.org\nhttps://r-pkgs.org/Structure.html\n\n‚Äúpackages have to be compiled to run‚Äù the question is when - show how to set options for different environment managers - what does this look like in CI - insufficiently motivated? - you need the dev version of something\n\n?Workflows break w/ current CRAN package, need to go back to older package\nInstall package from github\nDevelop your own packages under: Make it explicit why we care about installing from source\nbinaries are probably faster\nCRAN doesn‚Äôt always have binaries available but you may not need them"
  },
  {
    "objectID": "index.html#binary",
    "href": "index.html#binary",
    "title": "",
    "section": "Binary",
    "text": "Binary\n\ncompiled ahead of time\neasiest to install"
  },
  {
    "objectID": "index.html#where-to-get-binaries",
    "href": "index.html#where-to-get-binaries",
    "title": "",
    "section": "where to get binaries",
    "text": "where to get binaries\n\n\n\n\n\n\n\n\n\nCRAN\nPublic RStudio Package Manager\n\n\n\n\n windows\n‚úÖ\n‚úÖ\n\n\n mac OS\n‚úÖ\n‚ùå\n\n\n linux\n‚ùå\n‚úÖ"
  },
  {
    "objectID": "index.html#are-binaries-available",
    "href": "index.html#are-binaries-available",
    "title": "",
    "section": "are binaries available?",
    "text": "are binaries available?"
  },
  {
    "objectID": "index.html#cran",
    "href": "index.html#cran",
    "title": "",
    "section": "CRAN",
    "text": "CRAN"
  },
  {
    "objectID": "index.html#may-not-be-the-latest",
    "href": "index.html#may-not-be-the-latest",
    "title": "",
    "section": "may not be the latest",
    "text": "may not be the latest"
  },
  {
    "objectID": "index.html#may-not-be-the-latest-1",
    "href": "index.html#may-not-be-the-latest-1",
    "title": "",
    "section": "may not be the latest",
    "text": "may not be the latest\n> install.packages(\"parallelly\", repos = \"https://cran.rstudio.com\")\n\nInstalling package into ‚ÄòC:/Users/WDAGUtilityAccount/Documents/R/win-library/4.0‚Äô\n(as ‚Äòlib‚Äô is unspecified)\n\n  There is a binary version available but the source version is later:\n           binary source needs_compilation\nparallelly 1.31.0 1.32.1             FALSE\n\ninstalling the source package ‚Äòparallelly‚Äô\n\ntrying URL 'https://cran.rstudio.com/src/contrib/parallelly_1.32.1.tar.gz'\nContent type 'application/x-gzip' length 124853 bytes (121 KB)\ndownloaded 121 KB\n\n* installing *source* package 'parallelly' ...\n** package 'parallelly' successfully unpacked and MD5 sums checked\n** using staged installation\n** R\n** inst\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n  converting help for package 'parallelly'\n    finding HTML links ... done\n    as.cluster                              html  \n    autoStopCluster                         html  \n    availableConnections                    html  \n    availableCores                          html  \n    availableWorkers                        html  \n    canPortBeUsed                           html  \n    cpuLoad                                 html  \n    find_rshcmd                             html  \n    freeCores                               html  \n    freePort                                html  \n    getOption2                              html  \n    isConnectionValid                       html  \n    isForkedChild                           html  \n    isForkedNode                            html  \n    isLocalhostNode                         html  \n    isNodeAlive                             html  \n    makeClusterMPI                          html  \n    makeClusterPSOCK                        html  \n    parallelly.options                      html  \n    pid_exists                              html  \n    supportsMulticore                       html  \n*** copying figures\n** building package indices\n** testing if installed package can be loaded from temporary location\n*** arch - i386\n*** arch - x64\n** testing if installed package can be loaded from final location\n*** arch - i386\n*** arch - x64\n** testing if installed package keeps a record of temporary installation path\n* DONE (parallelly)"
  },
  {
    "objectID": "index.html#rstudio-package-manager",
    "href": "index.html#rstudio-package-manager",
    "title": "",
    "section": "RStudio Package Manager",
    "text": "RStudio Package Manager"
  },
  {
    "objectID": "index.html#rspm",
    "href": "index.html#rspm",
    "title": "",
    "section": "RSPM",
    "text": "RSPM"
  },
  {
    "objectID": "index.html#how-do-i-know-i-got-a-binary-package",
    "href": "index.html#how-do-i-know-i-got-a-binary-package",
    "title": "",
    "section": "how do I know I got a binary package?",
    "text": "how do I know I got a binary package?\n\nbaserenv\n\n\n> install.packages(\"remotes\")\nhttps://cran.rstudio.com/bin/windows/Rtools/\nInstalling package into ‚ÄòC:/Users/WDAGUtilityAccount/AppData/Local/R/win-library/4.2‚Äô\n(as ‚Äòlib‚Äô is unspecified)\ntrying URL 'https://packagemanager.rstudio.com/all/latest/bin/windows/contrib/4.2/remotes_2.4.2.zip'\nContent type 'binary/octet-stream' length 399930 bytes (390 KB)\ndownloaded 390 KB\n\npackage ‚Äòremotes‚Äô successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n  C:\\Users\\WDAGUtilityAccount\\AppData\\Local\\Temp\\RtmpA1edRi\\downloaded_packages\n\n\n> renv::install(\"fs\")\nRetrieving 'https://packagemanager.rstudio.com/all/latest/bin/windows/contrib/4.2/fs_1.5.2.zip' ...\n  OK [downloaded 380.9 Kb in 0.5 secs]\nInstalling fs [1.5.2] ...\n  OK [installed binary]\nMoving fs [1.5.2] into the cache ...\n  OK [moved to cache in 7.4 milliseconds]"
  },
  {
    "objectID": "index.html#pop-quiz-hotshot",
    "href": "index.html#pop-quiz-hotshot",
    "title": "",
    "section": "pop quiz, hotshot",
    "text": "pop quiz, hotshot\n\nDoes RStudio Package Manager serve a binary of dplyr for R 3.4?\n\n\n\n\n02:00"
  },
  {
    "objectID": "index.html#source",
    "href": "index.html#source",
    "title": "",
    "section": "Source",
    "text": "Source\n\ncompiled in development environment\nrequires extra tools when package uses C, C++ or Fortran\n\n\nOne additional complication for *nix users: generally on windows can install and load packages that depend on other lower level libraries quite easily. Explain installing sf, for example."
  },
  {
    "objectID": "index.html#if-you-dont-have-tools",
    "href": "index.html#if-you-dont-have-tools",
    "title": "",
    "section": "if you don‚Äôt have tools",
    "text": "if you don‚Äôt have tools\nRunning `R CMD build`...\n* checking for file 'C:\\Users\\WDAGUtilityAccount\\AppData\\Local\\Temp\\RtmpkTUH61\\remotes192027624804\\tidyverse-dplyr-36ef054/DESCRIPTION' ... OK\n* preparing 'dplyr':\n* checking DESCRIPTION meta-information ... OK\n* cleaning src\n* installing the package to process help pages\n      -----------------------------------\n* installing *source* package 'dplyr' ...\n** using staged installation\n** libs\nWarning in system(cmd) : 'make' not found\nERROR: compilation failed for package 'dplyr'\n* removing 'C:/Users/WDAGUT~1/AppData/Local/Temp/Rtmp6hYuyV/Rinst1334d1a23d1/dplyr'\n      -----------------------------------\nERROR: package installation failed"
  },
  {
    "objectID": "index.html#how-to-get-the-tools",
    "href": "index.html#how-to-get-the-tools",
    "title": "",
    "section": "how to get the tools",
    "text": "how to get the tools\n\nwindowsmacOSlinux\n\n\nRtools\n\n\nXCode\n‚ö†Ô∏è don‚Äôt run right now\nxcode-select --install\nor download from the Mac App Store\n\n\ninstall tools via package manager, e.g.\napt install make"
  },
  {
    "objectID": "index.html#got-tools",
    "href": "index.html#got-tools",
    "title": "",
    "section": "got tools?",
    "text": "got tools?\n\ndevtools::has_devel()\n\n\n## Your system is ready to build packages!"
  },
  {
    "objectID": "index.html#activity-2",
    "href": "index.html#activity-2",
    "title": "",
    "section": "activity",
    "text": "activity\n\ninstall a package from r-universe\n\n\ninstall.packages(\"gitcellar\") # not on cran!\nupdate your project .Rprofile:\noptions(repos = c(\n  ropensci = \"https://ropensci.r-universe.dev\",\n  CRAN = \"https://cloud.r-project.org\", # macOS\n  RSPM = \"https://packagemanager.rstudio.com/cran/latest\" # windows\n))\nrestart R\ninstall.packages(\"gitcellar\")\n\n\n\n\n10:00"
  },
  {
    "objectID": "index.html#discussion",
    "href": "index.html#discussion",
    "title": "",
    "section": "discussion",
    "text": "discussion\n\ndid you install gitcellar from binary or source?\n\nHow do you know?"
  },
  {
    "objectID": "index.html#wrapping-up-1",
    "href": "index.html#wrapping-up-1",
    "title": "",
    "section": "wrapping up",
    "text": "wrapping up\nbinaries are usually preferred, but for development versions of packages, you may need to install from source."
  },
  {
    "objectID": "index.html#why-2",
    "href": "index.html#why-2",
    "title": "",
    "section": "why?",
    "text": "why?\n\n\nThe quick and dirty approach you took then comes right back at you as a boomerang. Therefore, ban the concept of one-off altogether. No matter what the asker says, it will have to be done again, always!3/9\n\n‚Äî Edwin Thoen (@edwin_thoen) May 16, 2022"
  },
  {
    "objectID": "index.html#reproducibility-strategies",
    "href": "index.html#reproducibility-strategies",
    "title": "",
    "section": "reproducibility strategies",
    "text": "reproducibility strategies"
  },
  {
    "objectID": "index.html#reproducibility-strategies-1",
    "href": "index.html#reproducibility-strategies-1",
    "title": "",
    "section": "reproducibility strategies",
    "text": "reproducibility strategies"
  },
  {
    "objectID": "index.html#tools",
    "href": "index.html#tools",
    "title": "",
    "section": "tools",
    "text": "tools\n\n\nrspm\n\n\nrenv\n\n\n\n\nrenv has a number of tools that are helpful for adopting a project-based workflow: - lockfile records what packages you use and where you instaled them from - renv::install() can handle installation from remote sources, local sources, package versions, bioconductor, rspm - per-project library isolation with global package cache -makes it easy to install experimental versions of packages and then roll back to a stable release if it doesn‚Äôt work out"
  },
  {
    "objectID": "index.html#rspm-latest",
    "href": "index.html#rspm-latest",
    "title": "",
    "section": "rspm: latest",
    "text": "rspm: latest"
  },
  {
    "objectID": "index.html#rspm-date-based-snapshots",
    "href": "index.html#rspm-date-based-snapshots",
    "title": "",
    "section": "rspm: date-based snapshots",
    "text": "rspm: date-based snapshots"
  },
  {
    "objectID": "index.html#activity-3",
    "href": "index.html#activity-3",
    "title": "",
    "section": "activity",
    "text": "activity\n\ntime travel!\n\n\nupdate your project .Rprofile with a date-based snapshot of CRAN\noptions(repos = c(RSPM = \"https://packagemanager.rstudio.com/cran/2021-03-31\"))\nRestart R\ninstall.packages(\"dplyr\")\n\nwhat version of dplyr did you install?\n\n\n\n05:00"
  },
  {
    "objectID": "index.html#renvinit",
    "href": "index.html#renvinit",
    "title": "",
    "section": "renv::init()",
    "text": "renv::init()\n.libPaths()\nrenv::init()\n.libPaths()\nrenv::deactivate()\n.libPaths()\nwhy are we doing this? - don‚Äôt break your old dashboards - where is this actually going - talk more explicitly about the behavior of renv - steal kevin‚Äôs graphics on renv\n\nrun .libPaths() to see what your default package libraries are initialize an renv‚Äìyou‚Äôll see that the environment is now local to the project note the .Rprofile that gets placed into your project, which runs an R script in renv/activate.R deactivate the environment and check libPaths() again‚Äìit should be back to normal"
  },
  {
    "objectID": "index.html#renv.lock",
    "href": "index.html#renv.lock",
    "title": "",
    "section": "renv.lock",
    "text": "renv.lock\n{\n  \"R\": {\n    \"Version\": \"4.1.2\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://cloud.r-project.org\"\n      }\n    ]\n  },\n  \"Packages\": {\n    [...]\n    \"knitr\": {\n      \"Package\": \"knitr\",\n      \"Version\": \"1.39\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"029ab7c4badd3cf8af69016b2ba27493\",\n      \"Requirements\": [\n        \"evaluate\",\n        \"highr\",\n        \"stringr\",\n        \"xfun\",\n        \"yaml\"\n      ]\n    },\n    ...\n  }\n}\n\ncreated from renv::snapshot() by default, identifies dependencies of your code for example: usethis doesn‚Äôt usually appear in my lockfiles, because I‚Äôm running it interactively, rather than making it a dependency of my projects"
  },
  {
    "objectID": "index.html#renvinstall",
    "href": "index.html#renvinstall",
    "title": "",
    "section": "renv::install()",
    "text": "renv::install()\nor install.packages() with shims enabled\nrenv::install(\"jsonlite\")\nrenv::install(\"jsonlite@1.2\") # at version\nrenv::install(\"jeroen/jsonlite\") # latest\nrenv::install(\"jeroen/jsonlite@80854359976250f30a86a6992c0d8c3b3d95473d\") # at SHA\nrenv::install(\"path/to/package\") # local source\n\n\ndevtools::install()\ndevtools::install_version()\ndevtools::install_github()\ndevtools::install_github()\ndevtools::install(\"path/to/package\")"
  },
  {
    "objectID": "index.html#the-junk-drawer",
    "href": "index.html#the-junk-drawer",
    "title": "",
    "section": "the junk drawer",
    "text": "the junk drawer\nfor reprexes, tweets, and other ephemera:\n~/Documents/scratch\n\nI use renv for everything, and have one junk project into which I install things without regard for stability or reproducibility"
  },
  {
    "objectID": "index.html#using-publiic-package-manager",
    "href": "index.html#using-publiic-package-manager",
    "title": "",
    "section": "using publiic package manager",
    "text": "using publiic package manager"
  },
  {
    "objectID": "index.html#activity-4",
    "href": "index.html#activity-4",
    "title": "",
    "section": "activity",
    "text": "activity\n\ncreate two projects\n\njust use status messages rather than showing people lockfile\n\nusing renv, install.packages(‚Äúrenv‚Äù) install(‚Äújeroen/jsonlite‚Äù) install jsonlite from github then install from CRAN to roll back\n\nmore explanation of global cache\nthen roll back to released version\n\nrestore the environment from an existing project\n\n\nan old one of yours from github\ncreate an environment for a tidyverse package\n\ndtplyr renv example where across isn‚Äôt implementeed"
  },
  {
    "objectID": "index.html#activity-5",
    "href": "index.html#activity-5",
    "title": "",
    "section": "activity",
    "text": "activity\n\n\ninstall dev jsonlite, then roll back to released version\n\n\n\n\n\n01:00"
  },
  {
    "objectID": "index.html#practice-makes-perfect",
    "href": "index.html#practice-makes-perfect",
    "title": "",
    "section": "practice makes perfect",
    "text": "practice makes perfect\n\nWindows 10+macOSLinux\n\n\nWindows Sandbox\n\n\nü§∑\n\n\nMultipass\nDigital Ocean\nLinode\n\n\n\n\nThe best way to become more comfortable with installing things is to practice in an environment you can throw away\n- the windows sandbox lets you test in an environment on your machine that won‚Äôt affect your computer - enabling it is outside the scope of this course - for linux users, the easiest thing to do is stand up a small VPS - I don‚Äôt know of a good safe way to test mac environments"
  },
  {
    "objectID": "index.html#package-managers",
    "href": "index.html#package-managers",
    "title": "",
    "section": "package managers",
    "text": "package managers\nsoftware whose job it is to install other software\n\n\n\n\n\n\n\nOperating system\nRecommended\n\n\n\n\n windows\nscoop, chocolatey, winget\n\n\n macOS\nhomebrew\n\n\n linux\nhomebrew, apt, yum, zypper"
  },
  {
    "objectID": "index.html#section",
    "href": "index.html#section",
    "title": "",
    "section": "‚ö†Ô∏è",
    "text": "‚ö†Ô∏è\nAvoid installing your language with a package manager\n\nYou want to avoid having the language version your projects are using changed out from you unexpectedly Tools for freezing installations with your package manager are not consistently effective Other software that you install with your package manager may expect that package manager to be running the latest Idiosyncracies of your language will be better understood by a dedicated tool"
  },
  {
    "objectID": "index.html#clickops",
    "href": "index.html#clickops",
    "title": "",
    "section": "clickOps",
    "text": "clickOps"
  },
  {
    "objectID": "index.html#rig",
    "href": "index.html#rig",
    "title": "",
    "section": "rig",
    "text": "rig\nhttps://github.com/r-lib/rig/"
  },
  {
    "objectID": "index.html#language-managers",
    "href": "index.html#language-managers",
    "title": "",
    "section": "language managers",
    "text": "language managers\nusing your package manager, install a language manager\n\nwindows*nix\n\n\nscoop install rig\n\n\nbrew install rig\n\n\n\n pyenv\nnvm\n\n\n\nmany language managers are often written in some language other than the one they are responsible for managing"
  },
  {
    "objectID": "index.html#language-versions",
    "href": "index.html#language-versions",
    "title": "",
    "section": "language versions",
    "text": "language versions\nusing your language manager, install a language version:\n‚ùØ rig install --help\nrig-add\n\nDESCRIPTION:\n    Download and install an R version, from the official sources.\n    It keeps the already installed R versions, except versions within the\n    same minor branch, see below.\n\nEXAMPLES:\n    # Add the latest release\n    rig add release\n\n    # Install specific version\n    rig add 4.1.2\n\n    # Install latest version within a minor branch\n    rig add 4.1\n\nif you‚Äôre running a distribution of linux that rig doesn‚Äôt support: - https://docs.rstudio.com/resources/install-r/\nif no pre-compiled binary of rig is available: - https://docs.rstudio.com/resources/install-r-source/"
  },
  {
    "objectID": "index.html#environment-managers",
    "href": "index.html#environment-managers",
    "title": "",
    "section": "environment managers",
    "text": "environment managers\nusing your desired version of the language, install an environment manager:\ninstall.packages(\"renv\")"
  },
  {
    "objectID": "index.html#project-2",
    "href": "index.html#project-2",
    "title": "",
    "section": "project",
    "text": "project\nusing your environment manager, install your project‚Äôs dependencies:\n\ncreate a new environment\nrenv::init()\nrestore a pre-defined environment\nrenv::restore()"
  },
  {
    "objectID": "index.html#activity-6",
    "href": "index.html#activity-6",
    "title": "",
    "section": "activity",
    "text": "activity\n\n\nread the rig FAQ, or the rswitch guide\ninstall a different major/minor version of R\n\nhttps://cran.r-project.org/bin/macosx/\nhttps://cran.r-project.org/bin/windows/base/old/\n\ninstall rig\n\nuse `rig to install a different major or minor version of R\nopen RStudio with that newly installed R version\n\n\n\n\n\n\n01:00"
  },
  {
    "objectID": "index.html#rig-renv",
    "href": "index.html#rig-renv",
    "title": "",
    "section": "rig + renv",
    "text": "rig + renv\n\nsnapshot the project library with renv\ninstall a new version of R\nrestore the project library in the new R version\n\n\n\n\nPersonal R Administration"
  }
]